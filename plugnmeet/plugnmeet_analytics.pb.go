// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: plugnmeet_analytics.proto

package plugnmeet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AnalyticsEventType int32

const (
	AnalyticsEventType_ANALYTICS_EVENT_TYPE_ROOM AnalyticsEventType = 0
	AnalyticsEventType_ANALYTICS_EVENT_TYPE_USER AnalyticsEventType = 1
)

// Enum value maps for AnalyticsEventType.
var (
	AnalyticsEventType_name = map[int32]string{
		0: "ANALYTICS_EVENT_TYPE_ROOM",
		1: "ANALYTICS_EVENT_TYPE_USER",
	}
	AnalyticsEventType_value = map[string]int32{
		"ANALYTICS_EVENT_TYPE_ROOM": 0,
		"ANALYTICS_EVENT_TYPE_USER": 1,
	}
)

func (x AnalyticsEventType) Enum() *AnalyticsEventType {
	p := new(AnalyticsEventType)
	*p = x
	return p
}

func (x AnalyticsEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnalyticsEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_plugnmeet_analytics_proto_enumTypes[0].Descriptor()
}

func (AnalyticsEventType) Type() protoreflect.EnumType {
	return &file_plugnmeet_analytics_proto_enumTypes[0]
}

func (x AnalyticsEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnalyticsEventType.Descriptor instead.
func (AnalyticsEventType) EnumDescriptor() ([]byte, []int) {
	return file_plugnmeet_analytics_proto_rawDescGZIP(), []int{0}
}

type AnalyticsEvents int32

const (
	AnalyticsEvents_ANALYTICS_EVENT_UNKNOWN AnalyticsEvents = 0
	// room related
	AnalyticsEvents_ANALYTICS_EVENT_ROOM_POLL_ADDED AnalyticsEvents = 1
	AnalyticsEvents_ANALYTICS_EVENT_ROOM_POLL_ENDED AnalyticsEvents = 2
	// user join will be room related
	// after take record it will pass to user
	AnalyticsEvents_ANALYTICS_EVENT_USER_JOINED AnalyticsEvents = 3
	// room recorder
	AnalyticsEvents_ANALYTICS_EVENT_ROOM_RECORDING_STATUS             AnalyticsEvents = 4
	AnalyticsEvents_ANALYTICS_EVENT_ROOM_RTMP_STATUS                  AnalyticsEvents = 5
	AnalyticsEvents_ANALYTICS_EVENT_ROOM_BREAKOUT_ROOM                AnalyticsEvents = 6
	AnalyticsEvents_ANALYTICS_EVENT_ROOM_ETHERPAD_STATUS              AnalyticsEvents = 7
	AnalyticsEvents_ANALYTICS_EVENT_ROOM_EXTERNAL_DISPLAY_LINK_STATUS AnalyticsEvents = 8
	AnalyticsEvents_ANALYTICS_EVENT_ROOM_EXTERNAL_MEDIA_PLAYER_STATUS AnalyticsEvents = 9
	AnalyticsEvents_ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_STATUS        AnalyticsEvents = 10
	AnalyticsEvents_ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_TOTAL_USAGE   AnalyticsEvents = 11
	AnalyticsEvents_ANALYTICS_EVENT_ROOM_INGRESS_CREATED              AnalyticsEvents = 12
	AnalyticsEvents_ANALYTICS_EVENT_ROOM_WHITEBOARD_FILES             AnalyticsEvents = 13
	// here all related with user
	AnalyticsEvents_ANALYTICS_EVENT_USER_LEFT AnalyticsEvents = 14
	// microphone
	AnalyticsEvents_ANALYTICS_EVENT_USER_MIC_STATUS      AnalyticsEvents = 15
	AnalyticsEvents_ANALYTICS_EVENT_USER_TALKED          AnalyticsEvents = 16
	AnalyticsEvents_ANALYTICS_EVENT_USER_TALKED_DURATION AnalyticsEvents = 17 // in milliseconds
	// webcam
	AnalyticsEvents_ANALYTICS_EVENT_USER_WEBCAM_STATUS AnalyticsEvents = 18
	// screen share
	AnalyticsEvents_ANALYTICS_EVENT_USER_SCREEN_SHARE_STATUS AnalyticsEvents = 19
	// polls
	AnalyticsEvents_ANALYTICS_EVENT_USER_VOTED_POLL AnalyticsEvents = 20
	// chat
	AnalyticsEvents_ANALYTICS_EVENT_USER_PUBLIC_CHAT  AnalyticsEvents = 21
	AnalyticsEvents_ANALYTICS_EVENT_USER_PRIVATE_CHAT AnalyticsEvents = 22
	AnalyticsEvents_ANALYTICS_EVENT_USER_CHAT_FILES   AnalyticsEvents = 23
	// whiteboard
	AnalyticsEvents_ANALYTICS_EVENT_USER_WHITEBOARD_ANNOTATED AnalyticsEvents = 24
	AnalyticsEvents_ANALYTICS_EVENT_USER_WHITEBOARD_FILES     AnalyticsEvents = 25
	// speech services
	AnalyticsEvents_ANALYTICS_EVENT_USER_SPEECH_SERVICES_USAGE  AnalyticsEvents = 26
	AnalyticsEvents_ANALYTICS_EVENT_USER_SPEECH_SERVICES_STATUS AnalyticsEvents = 27
	// etc
	AnalyticsEvents_ANALYTICS_EVENT_USER_INTERFACE_VISIBILITY AnalyticsEvents = 28
	AnalyticsEvents_ANALYTICS_EVENT_USER_RAISE_HAND           AnalyticsEvents = 29
	AnalyticsEvents_ANALYTICS_EVENT_USER_CONNECTION_QUALITY   AnalyticsEvents = 30
)

// Enum value maps for AnalyticsEvents.
var (
	AnalyticsEvents_name = map[int32]string{
		0:  "ANALYTICS_EVENT_UNKNOWN",
		1:  "ANALYTICS_EVENT_ROOM_POLL_ADDED",
		2:  "ANALYTICS_EVENT_ROOM_POLL_ENDED",
		3:  "ANALYTICS_EVENT_USER_JOINED",
		4:  "ANALYTICS_EVENT_ROOM_RECORDING_STATUS",
		5:  "ANALYTICS_EVENT_ROOM_RTMP_STATUS",
		6:  "ANALYTICS_EVENT_ROOM_BREAKOUT_ROOM",
		7:  "ANALYTICS_EVENT_ROOM_ETHERPAD_STATUS",
		8:  "ANALYTICS_EVENT_ROOM_EXTERNAL_DISPLAY_LINK_STATUS",
		9:  "ANALYTICS_EVENT_ROOM_EXTERNAL_MEDIA_PLAYER_STATUS",
		10: "ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_STATUS",
		11: "ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_TOTAL_USAGE",
		12: "ANALYTICS_EVENT_ROOM_INGRESS_CREATED",
		13: "ANALYTICS_EVENT_ROOM_WHITEBOARD_FILES",
		14: "ANALYTICS_EVENT_USER_LEFT",
		15: "ANALYTICS_EVENT_USER_MIC_STATUS",
		16: "ANALYTICS_EVENT_USER_TALKED",
		17: "ANALYTICS_EVENT_USER_TALKED_DURATION",
		18: "ANALYTICS_EVENT_USER_WEBCAM_STATUS",
		19: "ANALYTICS_EVENT_USER_SCREEN_SHARE_STATUS",
		20: "ANALYTICS_EVENT_USER_VOTED_POLL",
		21: "ANALYTICS_EVENT_USER_PUBLIC_CHAT",
		22: "ANALYTICS_EVENT_USER_PRIVATE_CHAT",
		23: "ANALYTICS_EVENT_USER_CHAT_FILES",
		24: "ANALYTICS_EVENT_USER_WHITEBOARD_ANNOTATED",
		25: "ANALYTICS_EVENT_USER_WHITEBOARD_FILES",
		26: "ANALYTICS_EVENT_USER_SPEECH_SERVICES_USAGE",
		27: "ANALYTICS_EVENT_USER_SPEECH_SERVICES_STATUS",
		28: "ANALYTICS_EVENT_USER_INTERFACE_VISIBILITY",
		29: "ANALYTICS_EVENT_USER_RAISE_HAND",
		30: "ANALYTICS_EVENT_USER_CONNECTION_QUALITY",
	}
	AnalyticsEvents_value = map[string]int32{
		"ANALYTICS_EVENT_UNKNOWN":                           0,
		"ANALYTICS_EVENT_ROOM_POLL_ADDED":                   1,
		"ANALYTICS_EVENT_ROOM_POLL_ENDED":                   2,
		"ANALYTICS_EVENT_USER_JOINED":                       3,
		"ANALYTICS_EVENT_ROOM_RECORDING_STATUS":             4,
		"ANALYTICS_EVENT_ROOM_RTMP_STATUS":                  5,
		"ANALYTICS_EVENT_ROOM_BREAKOUT_ROOM":                6,
		"ANALYTICS_EVENT_ROOM_ETHERPAD_STATUS":              7,
		"ANALYTICS_EVENT_ROOM_EXTERNAL_DISPLAY_LINK_STATUS": 8,
		"ANALYTICS_EVENT_ROOM_EXTERNAL_MEDIA_PLAYER_STATUS": 9,
		"ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_STATUS":        10,
		"ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_TOTAL_USAGE":   11,
		"ANALYTICS_EVENT_ROOM_INGRESS_CREATED":              12,
		"ANALYTICS_EVENT_ROOM_WHITEBOARD_FILES":             13,
		"ANALYTICS_EVENT_USER_LEFT":                         14,
		"ANALYTICS_EVENT_USER_MIC_STATUS":                   15,
		"ANALYTICS_EVENT_USER_TALKED":                       16,
		"ANALYTICS_EVENT_USER_TALKED_DURATION":              17,
		"ANALYTICS_EVENT_USER_WEBCAM_STATUS":                18,
		"ANALYTICS_EVENT_USER_SCREEN_SHARE_STATUS":          19,
		"ANALYTICS_EVENT_USER_VOTED_POLL":                   20,
		"ANALYTICS_EVENT_USER_PUBLIC_CHAT":                  21,
		"ANALYTICS_EVENT_USER_PRIVATE_CHAT":                 22,
		"ANALYTICS_EVENT_USER_CHAT_FILES":                   23,
		"ANALYTICS_EVENT_USER_WHITEBOARD_ANNOTATED":         24,
		"ANALYTICS_EVENT_USER_WHITEBOARD_FILES":             25,
		"ANALYTICS_EVENT_USER_SPEECH_SERVICES_USAGE":        26,
		"ANALYTICS_EVENT_USER_SPEECH_SERVICES_STATUS":       27,
		"ANALYTICS_EVENT_USER_INTERFACE_VISIBILITY":         28,
		"ANALYTICS_EVENT_USER_RAISE_HAND":                   29,
		"ANALYTICS_EVENT_USER_CONNECTION_QUALITY":           30,
	}
)

func (x AnalyticsEvents) Enum() *AnalyticsEvents {
	p := new(AnalyticsEvents)
	*p = x
	return p
}

func (x AnalyticsEvents) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnalyticsEvents) Descriptor() protoreflect.EnumDescriptor {
	return file_plugnmeet_analytics_proto_enumTypes[1].Descriptor()
}

func (AnalyticsEvents) Type() protoreflect.EnumType {
	return &file_plugnmeet_analytics_proto_enumTypes[1]
}

func (x AnalyticsEvents) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnalyticsEvents.Descriptor instead.
func (AnalyticsEvents) EnumDescriptor() ([]byte, []int) {
	return file_plugnmeet_analytics_proto_rawDescGZIP(), []int{1}
}

type AnalyticsStatus int32

const (
	AnalyticsStatus_ANALYTICS_STATUS_STARTED AnalyticsStatus = 0
	AnalyticsStatus_ANALYTICS_STATUS_ENDED   AnalyticsStatus = 1
	AnalyticsStatus_ANALYTICS_STATUS_MUTED   AnalyticsStatus = 2
	AnalyticsStatus_ANALYTICS_STATUS_UNMUTED AnalyticsStatus = 3
)

// Enum value maps for AnalyticsStatus.
var (
	AnalyticsStatus_name = map[int32]string{
		0: "ANALYTICS_STATUS_STARTED",
		1: "ANALYTICS_STATUS_ENDED",
		2: "ANALYTICS_STATUS_MUTED",
		3: "ANALYTICS_STATUS_UNMUTED",
	}
	AnalyticsStatus_value = map[string]int32{
		"ANALYTICS_STATUS_STARTED": 0,
		"ANALYTICS_STATUS_ENDED":   1,
		"ANALYTICS_STATUS_MUTED":   2,
		"ANALYTICS_STATUS_UNMUTED": 3,
	}
)

func (x AnalyticsStatus) Enum() *AnalyticsStatus {
	p := new(AnalyticsStatus)
	*p = x
	return p
}

func (x AnalyticsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnalyticsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_plugnmeet_analytics_proto_enumTypes[2].Descriptor()
}

func (AnalyticsStatus) Type() protoreflect.EnumType {
	return &file_plugnmeet_analytics_proto_enumTypes[2]
}

func (x AnalyticsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnalyticsStatus.Descriptor instead.
func (AnalyticsStatus) EnumDescriptor() ([]byte, []int) {
	return file_plugnmeet_analytics_proto_rawDescGZIP(), []int{2}
}

type AnalyticsDataMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType AnalyticsEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=plugnmeet.AnalyticsEventType" json:"event_type,omitempty"`
	EventName AnalyticsEvents    `protobuf:"varint,2,opt,name=event_name,json=eventName,proto3,enum=plugnmeet.AnalyticsEvents" json:"event_name,omitempty"`
	RoomId    string             `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// should be unix milliseconds
	Time int64 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
	// if we pass value here then it will use redis SET to set the value for the key
	EventValueString *string `protobuf:"bytes,5,opt,name=event_value_string,json=eventValueString,proto3,oneof" json:"event_value_string,omitempty"`
	// if we pass value here then it will use redis INCRBY to increment value for the key
	EventValueInteger *int64 `protobuf:"varint,6,opt,name=event_value_integer,json=eventValueInteger,proto3,oneof" json:"event_value_integer,omitempty"`
	// if we pass value here then it will use redis HSET to set hash field value for the key
	// hash field will be unix milliseconds, so it will remain unique as always
	HsetValue *string `protobuf:"bytes,7,opt,name=hset_value,json=hsetValue,proto3,oneof" json:"hset_value,omitempty"`
	RoomSid   *string `protobuf:"bytes,8,opt,name=room_sid,json=roomSid,proto3,oneof" json:"room_sid,omitempty"`
	UserId    *string `protobuf:"bytes,9,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	UserName  *string `protobuf:"bytes,10,opt,name=user_name,json=userName,proto3,oneof" json:"user_name,omitempty"`
	// this extra_data can be use for various purposes like, room or user metadata
	ExtraData *string `protobuf:"bytes,11,opt,name=extra_data,json=extraData,proto3,oneof" json:"extra_data,omitempty"`
}

func (x *AnalyticsDataMsg) Reset() {
	*x = AnalyticsDataMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_analytics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsDataMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsDataMsg) ProtoMessage() {}

func (x *AnalyticsDataMsg) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_analytics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsDataMsg.ProtoReflect.Descriptor instead.
func (*AnalyticsDataMsg) Descriptor() ([]byte, []int) {
	return file_plugnmeet_analytics_proto_rawDescGZIP(), []int{0}
}

func (x *AnalyticsDataMsg) GetEventType() AnalyticsEventType {
	if x != nil {
		return x.EventType
	}
	return AnalyticsEventType_ANALYTICS_EVENT_TYPE_ROOM
}

func (x *AnalyticsDataMsg) GetEventName() AnalyticsEvents {
	if x != nil {
		return x.EventName
	}
	return AnalyticsEvents_ANALYTICS_EVENT_UNKNOWN
}

func (x *AnalyticsDataMsg) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *AnalyticsDataMsg) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AnalyticsDataMsg) GetEventValueString() string {
	if x != nil && x.EventValueString != nil {
		return *x.EventValueString
	}
	return ""
}

func (x *AnalyticsDataMsg) GetEventValueInteger() int64 {
	if x != nil && x.EventValueInteger != nil {
		return *x.EventValueInteger
	}
	return 0
}

func (x *AnalyticsDataMsg) GetHsetValue() string {
	if x != nil && x.HsetValue != nil {
		return *x.HsetValue
	}
	return ""
}

func (x *AnalyticsDataMsg) GetRoomSid() string {
	if x != nil && x.RoomSid != nil {
		return *x.RoomSid
	}
	return ""
}

func (x *AnalyticsDataMsg) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *AnalyticsDataMsg) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *AnalyticsDataMsg) GetExtraData() string {
	if x != nil && x.ExtraData != nil {
		return *x.ExtraData
	}
	return ""
}

type AnalyticsEventValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time  int64  `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AnalyticsEventValue) Reset() {
	*x = AnalyticsEventValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_analytics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsEventValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsEventValue) ProtoMessage() {}

func (x *AnalyticsEventValue) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_analytics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsEventValue.ProtoReflect.Descriptor instead.
func (*AnalyticsEventValue) Descriptor() ([]byte, []int) {
	return file_plugnmeet_analytics_proto_rawDescGZIP(), []int{1}
}

func (x *AnalyticsEventValue) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *AnalyticsEventValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AnalyticsEventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Total  uint32                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Values []*AnalyticsEventValue `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *AnalyticsEventData) Reset() {
	*x = AnalyticsEventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_analytics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsEventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsEventData) ProtoMessage() {}

func (x *AnalyticsEventData) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_analytics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsEventData.ProtoReflect.Descriptor instead.
func (*AnalyticsEventData) Descriptor() ([]byte, []int) {
	return file_plugnmeet_analytics_proto_rawDescGZIP(), []int{2}
}

func (x *AnalyticsEventData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AnalyticsEventData) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *AnalyticsEventData) GetValues() []*AnalyticsEventValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type AnalyticsRoomInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId         string                `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	RoomTitle      string                `protobuf:"bytes,2,opt,name=room_title,json=roomTitle,proto3" json:"room_title,omitempty"`
	RoomTotalUsers int64                 `protobuf:"varint,3,opt,name=room_total_users,json=roomTotalUsers,proto3" json:"room_total_users,omitempty"`
	RoomCreation   int64                 `protobuf:"varint,4,opt,name=room_creation,json=roomCreation,proto3" json:"room_creation,omitempty"`
	RoomEnded      int64                 `protobuf:"varint,5,opt,name=room_ended,json=roomEnded,proto3" json:"room_ended,omitempty"`
	RoomDuration   int64                 `protobuf:"varint,6,opt,name=room_duration,json=roomDuration,proto3" json:"room_duration,omitempty"`
	EnabledE2Ee    bool                  `protobuf:"varint,7,opt,name=enabled_e2ee,json=enabledE2ee,proto3" json:"enabled_e2ee,omitempty"`
	Events         []*AnalyticsEventData `protobuf:"bytes,9,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *AnalyticsRoomInfo) Reset() {
	*x = AnalyticsRoomInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_analytics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsRoomInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsRoomInfo) ProtoMessage() {}

func (x *AnalyticsRoomInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_analytics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsRoomInfo.ProtoReflect.Descriptor instead.
func (*AnalyticsRoomInfo) Descriptor() ([]byte, []int) {
	return file_plugnmeet_analytics_proto_rawDescGZIP(), []int{3}
}

func (x *AnalyticsRoomInfo) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *AnalyticsRoomInfo) GetRoomTitle() string {
	if x != nil {
		return x.RoomTitle
	}
	return ""
}

func (x *AnalyticsRoomInfo) GetRoomTotalUsers() int64 {
	if x != nil {
		return x.RoomTotalUsers
	}
	return 0
}

func (x *AnalyticsRoomInfo) GetRoomCreation() int64 {
	if x != nil {
		return x.RoomCreation
	}
	return 0
}

func (x *AnalyticsRoomInfo) GetRoomEnded() int64 {
	if x != nil {
		return x.RoomEnded
	}
	return 0
}

func (x *AnalyticsRoomInfo) GetRoomDuration() int64 {
	if x != nil {
		return x.RoomDuration
	}
	return 0
}

func (x *AnalyticsRoomInfo) GetEnabledE2Ee() bool {
	if x != nil {
		return x.EnabledE2Ee
	}
	return false
}

func (x *AnalyticsRoomInfo) GetEvents() []*AnalyticsEventData {
	if x != nil {
		return x.Events
	}
	return nil
}

type AnalyticsUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string                `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name      string                `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsAdmin   bool                  `protobuf:"varint,3,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	ExtraData *string               `protobuf:"bytes,4,opt,name=extra_data,json=extraData,proto3,oneof" json:"extra_data,omitempty"`
	Events    []*AnalyticsEventData `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *AnalyticsUserInfo) Reset() {
	*x = AnalyticsUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_analytics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsUserInfo) ProtoMessage() {}

func (x *AnalyticsUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_analytics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsUserInfo.ProtoReflect.Descriptor instead.
func (*AnalyticsUserInfo) Descriptor() ([]byte, []int) {
	return file_plugnmeet_analytics_proto_rawDescGZIP(), []int{4}
}

func (x *AnalyticsUserInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AnalyticsUserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AnalyticsUserInfo) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *AnalyticsUserInfo) GetExtraData() string {
	if x != nil && x.ExtraData != nil {
		return *x.ExtraData
	}
	return ""
}

func (x *AnalyticsUserInfo) GetEvents() []*AnalyticsEventData {
	if x != nil {
		return x.Events
	}
	return nil
}

type AnalyticsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room  *AnalyticsRoomInfo   `protobuf:"bytes,1,opt,name=room,proto3" json:"room,omitempty"`
	Users []*AnalyticsUserInfo `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *AnalyticsResult) Reset() {
	*x = AnalyticsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_analytics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsResult) ProtoMessage() {}

func (x *AnalyticsResult) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_analytics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsResult.ProtoReflect.Descriptor instead.
func (*AnalyticsResult) Descriptor() ([]byte, []int) {
	return file_plugnmeet_analytics_proto_rawDescGZIP(), []int{5}
}

func (x *AnalyticsResult) GetRoom() *AnalyticsRoomInfo {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *AnalyticsResult) GetUsers() []*AnalyticsUserInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

type AnalyticsRedisUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	IsAdmin   bool    `protobuf:"varint,2,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
	ExtraData *string `protobuf:"bytes,3,opt,name=extra_data,json=extraData,proto3,oneof" json:"extra_data,omitempty"`
}

func (x *AnalyticsRedisUserInfo) Reset() {
	*x = AnalyticsRedisUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_analytics_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyticsRedisUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyticsRedisUserInfo) ProtoMessage() {}

func (x *AnalyticsRedisUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_analytics_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyticsRedisUserInfo.ProtoReflect.Descriptor instead.
func (*AnalyticsRedisUserInfo) Descriptor() ([]byte, []int) {
	return file_plugnmeet_analytics_proto_rawDescGZIP(), []int{6}
}

func (x *AnalyticsRedisUserInfo) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AnalyticsRedisUserInfo) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

func (x *AnalyticsRedisUserInfo) GetExtraData() string {
	if x != nil && x.ExtraData != nil {
		return *x.ExtraData
	}
	return ""
}

var File_plugnmeet_analytics_proto protoreflect.FileDescriptor

var file_plugnmeet_analytics_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x6c, 0x75,
	0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x22, 0xbc, 0x04, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x0a, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x12, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x01, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x68, 0x73, 0x65,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x09, 0x68, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x53, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x68, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x73, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3f, 0x0a, 0x13, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x76, 0x0a, 0x12, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65,
	0x65, 0x74, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xb8,
	0x02, 0x0a, 0x11, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x6f, 0x6f, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72,
	0x6f, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x32, 0x65, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x32,
	0x65, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x11, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x77, 0x0a, 0x0f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x32, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65,
	0x74, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x64, 0x69, 0x73, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x52, 0x0a, 0x12, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x41,
	0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4e,
	0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x9c, 0x0a, 0x0a, 0x0f, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x0a,
	0x17, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x4e,
	0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f,
	0x4f, 0x4d, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x23, 0x0a, 0x1f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43,
	0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4a, 0x4f, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49,
	0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x04,
	0x12, 0x24, 0x0a, 0x20, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x52, 0x54, 0x4d, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x05, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54,
	0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x42,
	0x52, 0x45, 0x41, 0x4b, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x06, 0x12, 0x28,
	0x0a, 0x24, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x50, 0x41, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x07, 0x12, 0x35, 0x0a, 0x31, 0x41, 0x4e, 0x41, 0x4c,
	0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41,
	0x59, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x08, 0x12,
	0x35, 0x0a, 0x31, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x09, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54,
	0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x0a, 0x12, 0x33, 0x0a, 0x2f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54,
	0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x4f,
	0x54, 0x41, 0x4c, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10, 0x0b, 0x12, 0x28, 0x0a, 0x24, 0x41,
	0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x4f, 0x4f, 0x4d, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49,
	0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x57, 0x48,
	0x49, 0x54, 0x45, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x0d,
	0x12, 0x1d, 0x0a, 0x19, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x0e, 0x12,
	0x23, 0x0a, 0x1f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43,
	0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x4c,
	0x4b, 0x45, 0x44, 0x10, 0x10, 0x12, 0x28, 0x0a, 0x24, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49,
	0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x41,
	0x4c, 0x4b, 0x45, 0x44, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12,
	0x26, 0x0a, 0x22, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x57, 0x45, 0x42, 0x43, 0x41, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x12, 0x12, 0x2c, 0x0a, 0x28, 0x41, 0x4e, 0x41, 0x4c, 0x59,
	0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x13, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49,
	0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x4f,
	0x54, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x4c, 0x4c, 0x10, 0x14, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x4e,
	0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x15,
	0x12, 0x25, 0x0a, 0x21, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x16, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x4e, 0x41, 0x4c, 0x59,
	0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x48, 0x41, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x17, 0x12, 0x2d, 0x0a, 0x29,
	0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f,
	0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x45, 0x44, 0x10, 0x18, 0x12, 0x29, 0x0a, 0x25, 0x41,
	0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x53, 0x10, 0x19, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54,
	0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x5f, 0x55,
	0x53, 0x41, 0x47, 0x45, 0x10, 0x1a, 0x12, 0x2f, 0x0a, 0x2b, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54,
	0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x43, 0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x53, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x1b, 0x12, 0x2d, 0x0a, 0x29, 0x41, 0x4e, 0x41, 0x4c, 0x59,
	0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x10, 0x1c, 0x12, 0x23, 0x0a, 0x1f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54,
	0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52,
	0x41, 0x49, 0x53, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x10, 0x1d, 0x12, 0x2b, 0x0a, 0x27, 0x41,
	0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x1e, 0x2a, 0x85, 0x01, 0x0a, 0x0f, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18,
	0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4e,
	0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54,
	0x49, 0x43, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x55, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x54, 0x49, 0x43, 0x53, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4d, 0x55, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d,
	0x79, 0x6e, 0x61, 0x70, 0x61, 0x72, 0x72, 0x6f, 0x74, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d,
	0x65, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x6c, 0x75,
	0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugnmeet_analytics_proto_rawDescOnce sync.Once
	file_plugnmeet_analytics_proto_rawDescData = file_plugnmeet_analytics_proto_rawDesc
)

func file_plugnmeet_analytics_proto_rawDescGZIP() []byte {
	file_plugnmeet_analytics_proto_rawDescOnce.Do(func() {
		file_plugnmeet_analytics_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugnmeet_analytics_proto_rawDescData)
	})
	return file_plugnmeet_analytics_proto_rawDescData
}

var file_plugnmeet_analytics_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_plugnmeet_analytics_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_plugnmeet_analytics_proto_goTypes = []interface{}{
	(AnalyticsEventType)(0),        // 0: plugnmeet.AnalyticsEventType
	(AnalyticsEvents)(0),           // 1: plugnmeet.AnalyticsEvents
	(AnalyticsStatus)(0),           // 2: plugnmeet.AnalyticsStatus
	(*AnalyticsDataMsg)(nil),       // 3: plugnmeet.AnalyticsDataMsg
	(*AnalyticsEventValue)(nil),    // 4: plugnmeet.AnalyticsEventValue
	(*AnalyticsEventData)(nil),     // 5: plugnmeet.AnalyticsEventData
	(*AnalyticsRoomInfo)(nil),      // 6: plugnmeet.AnalyticsRoomInfo
	(*AnalyticsUserInfo)(nil),      // 7: plugnmeet.AnalyticsUserInfo
	(*AnalyticsResult)(nil),        // 8: plugnmeet.AnalyticsResult
	(*AnalyticsRedisUserInfo)(nil), // 9: plugnmeet.AnalyticsRedisUserInfo
}
var file_plugnmeet_analytics_proto_depIdxs = []int32{
	0, // 0: plugnmeet.AnalyticsDataMsg.event_type:type_name -> plugnmeet.AnalyticsEventType
	1, // 1: plugnmeet.AnalyticsDataMsg.event_name:type_name -> plugnmeet.AnalyticsEvents
	4, // 2: plugnmeet.AnalyticsEventData.values:type_name -> plugnmeet.AnalyticsEventValue
	5, // 3: plugnmeet.AnalyticsRoomInfo.events:type_name -> plugnmeet.AnalyticsEventData
	5, // 4: plugnmeet.AnalyticsUserInfo.events:type_name -> plugnmeet.AnalyticsEventData
	6, // 5: plugnmeet.AnalyticsResult.room:type_name -> plugnmeet.AnalyticsRoomInfo
	7, // 6: plugnmeet.AnalyticsResult.users:type_name -> plugnmeet.AnalyticsUserInfo
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_plugnmeet_analytics_proto_init() }
func file_plugnmeet_analytics_proto_init() {
	if File_plugnmeet_analytics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plugnmeet_analytics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsDataMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_analytics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsEventValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_analytics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsEventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_analytics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsRoomInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_analytics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_analytics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_analytics_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyticsRedisUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_plugnmeet_analytics_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_plugnmeet_analytics_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_plugnmeet_analytics_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugnmeet_analytics_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugnmeet_analytics_proto_goTypes,
		DependencyIndexes: file_plugnmeet_analytics_proto_depIdxs,
		EnumInfos:         file_plugnmeet_analytics_proto_enumTypes,
		MessageInfos:      file_plugnmeet_analytics_proto_msgTypes,
	}.Build()
	File_plugnmeet_analytics_proto = out.File
	file_plugnmeet_analytics_proto_rawDesc = nil
	file_plugnmeet_analytics_proto_goTypes = nil
	file_plugnmeet_analytics_proto_depIdxs = nil
}
