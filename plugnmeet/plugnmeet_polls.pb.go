// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: plugnmeet_polls.proto

package plugnmeet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreatePollReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId   string               `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	UserId   string               `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PollId   string               `protobuf:"bytes,3,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	Question string               `protobuf:"bytes,4,opt,name=question,proto3" json:"question,omitempty"`
	Options  []*CreatePollOptions `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *CreatePollReq) Reset() {
	*x = CreatePollReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_polls_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePollReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePollReq) ProtoMessage() {}

func (x *CreatePollReq) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePollReq.ProtoReflect.Descriptor instead.
func (*CreatePollReq) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePollReq) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *CreatePollReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreatePollReq) GetPollId() string {
	if x != nil {
		return x.PollId
	}
	return ""
}

func (x *CreatePollReq) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *CreatePollReq) GetOptions() []*CreatePollOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type CreatePollOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *CreatePollOptions) Reset() {
	*x = CreatePollOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_polls_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePollOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePollOptions) ProtoMessage() {}

func (x *CreatePollOptions) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePollOptions.ProtoReflect.Descriptor instead.
func (*CreatePollOptions) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePollOptions) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreatePollOptions) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type PollInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RoomId    string               `protobuf:"bytes,2,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	Question  string               `protobuf:"bytes,3,opt,name=question,proto3" json:"question,omitempty"`
	Options   []*CreatePollOptions `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	IsRunning bool                 `protobuf:"varint,5,opt,name=is_running,json=isRunning,proto3" json:"is_running,omitempty"`
	Created   int64                `protobuf:"varint,6,opt,name=created,proto3" json:"created,omitempty"`
	CreatedBy string               `protobuf:"bytes,7,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	ClosedBy  string               `protobuf:"bytes,8,opt,name=closed_by,json=closedBy,proto3" json:"closed_by,omitempty"`
}

func (x *PollInfo) Reset() {
	*x = PollInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_polls_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollInfo) ProtoMessage() {}

func (x *PollInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollInfo.ProtoReflect.Descriptor instead.
func (*PollInfo) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{2}
}

func (x *PollInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PollInfo) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *PollInfo) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *PollInfo) GetOptions() []*CreatePollOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PollInfo) GetIsRunning() bool {
	if x != nil {
		return x.IsRunning
	}
	return false
}

func (x *PollInfo) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *PollInfo) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *PollInfo) GetClosedBy() string {
	if x != nil {
		return x.ClosedBy
	}
	return ""
}

type SubmitPollResponseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId         string `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	UserId         string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	PollId         string `protobuf:"bytes,4,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	SelectedOption uint64 `protobuf:"varint,5,opt,name=selected_option,json=selectedOption,proto3" json:"selected_option,omitempty"`
}

func (x *SubmitPollResponseReq) Reset() {
	*x = SubmitPollResponseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_polls_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitPollResponseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitPollResponseReq) ProtoMessage() {}

func (x *SubmitPollResponseReq) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitPollResponseReq.ProtoReflect.Descriptor instead.
func (*SubmitPollResponseReq) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitPollResponseReq) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *SubmitPollResponseReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SubmitPollResponseReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubmitPollResponseReq) GetPollId() string {
	if x != nil {
		return x.PollId
	}
	return ""
}

func (x *SubmitPollResponseReq) GetSelectedOption() uint64 {
	if x != nil {
		return x.SelectedOption
	}
	return 0
}

type ClosePollReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId string `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PollId string `protobuf:"bytes,3,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
}

func (x *ClosePollReq) Reset() {
	*x = ClosePollReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_polls_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosePollReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosePollReq) ProtoMessage() {}

func (x *ClosePollReq) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosePollReq.ProtoReflect.Descriptor instead.
func (*ClosePollReq) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{4}
}

func (x *ClosePollReq) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *ClosePollReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClosePollReq) GetPollId() string {
	if x != nil {
		return x.PollId
	}
	return ""
}

type PollResponsesResultOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text      string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	VoteCount uint64 `protobuf:"varint,3,opt,name=vote_count,json=voteCount,proto3" json:"vote_count,omitempty"`
}

func (x *PollResponsesResultOptions) Reset() {
	*x = PollResponsesResultOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_polls_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollResponsesResultOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollResponsesResultOptions) ProtoMessage() {}

func (x *PollResponsesResultOptions) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollResponsesResultOptions.ProtoReflect.Descriptor instead.
func (*PollResponsesResultOptions) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{5}
}

func (x *PollResponsesResultOptions) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PollResponsesResultOptions) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PollResponsesResultOptions) GetVoteCount() uint64 {
	if x != nil {
		return x.VoteCount
	}
	return 0
}

type PollResponsesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question       string                        `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	TotalResponses uint64                        `protobuf:"varint,2,opt,name=total_responses,json=totalResponses,proto3" json:"total_responses,omitempty"`
	Options        []*PollResponsesResultOptions `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *PollResponsesResult) Reset() {
	*x = PollResponsesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_polls_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollResponsesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollResponsesResult) ProtoMessage() {}

func (x *PollResponsesResult) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollResponsesResult.ProtoReflect.Descriptor instead.
func (*PollResponsesResult) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{6}
}

func (x *PollResponsesResult) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *PollResponsesResult) GetTotalResponses() uint64 {
	if x != nil {
		return x.TotalResponses
	}
	return 0
}

func (x *PollResponsesResult) GetOptions() []*PollResponsesResultOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type PollsStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPolls   uint64 `protobuf:"varint,1,opt,name=total_polls,json=totalPolls,proto3" json:"total_polls,omitempty"`
	TotalRunning uint64 `protobuf:"varint,2,opt,name=total_running,json=totalRunning,proto3" json:"total_running,omitempty"`
}

func (x *PollsStats) Reset() {
	*x = PollsStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_polls_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollsStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollsStats) ProtoMessage() {}

func (x *PollsStats) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollsStats.ProtoReflect.Descriptor instead.
func (*PollsStats) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{7}
}

func (x *PollsStats) GetTotalPolls() uint64 {
	if x != nil {
		return x.TotalPolls
	}
	return 0
}

func (x *PollsStats) GetTotalRunning() uint64 {
	if x != nil {
		return x.TotalRunning
	}
	return 0
}

type PollResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status              bool                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg                 string               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PollId              *string              `protobuf:"bytes,3,opt,name=poll_id,json=pollId,proto3,oneof" json:"poll_id,omitempty"`
	TotalResponses      *uint64              `protobuf:"varint,4,opt,name=total_responses,json=totalResponses,proto3,oneof" json:"total_responses,omitempty"`
	Voted               *uint64              `protobuf:"varint,5,opt,name=voted,proto3,oneof" json:"voted,omitempty"`
	Responses           map[string]string    `protobuf:"bytes,6,rep,name=responses,proto3" json:"responses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Polls               []*PollInfo          `protobuf:"bytes,7,rep,name=polls,proto3" json:"polls,omitempty"`
	Stats               *PollsStats          `protobuf:"bytes,8,opt,name=stats,proto3,oneof" json:"stats,omitempty"`
	TotalPolls          *uint64              `protobuf:"varint,9,opt,name=total_polls,json=totalPolls,proto3,oneof" json:"total_polls,omitempty"`
	TotalRunning        *uint64              `protobuf:"varint,10,opt,name=total_running,json=totalRunning,proto3,oneof" json:"total_running,omitempty"`
	PollResponsesResult *PollResponsesResult `protobuf:"bytes,11,opt,name=poll_responses_result,json=pollResponsesResult,proto3,oneof" json:"poll_responses_result,omitempty"`
}

func (x *PollResponse) Reset() {
	*x = PollResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_polls_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollResponse) ProtoMessage() {}

func (x *PollResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_polls_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollResponse.ProtoReflect.Descriptor instead.
func (*PollResponse) Descriptor() ([]byte, []int) {
	return file_plugnmeet_polls_proto_rawDescGZIP(), []int{8}
}

func (x *PollResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *PollResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PollResponse) GetPollId() string {
	if x != nil && x.PollId != nil {
		return *x.PollId
	}
	return ""
}

func (x *PollResponse) GetTotalResponses() uint64 {
	if x != nil && x.TotalResponses != nil {
		return *x.TotalResponses
	}
	return 0
}

func (x *PollResponse) GetVoted() uint64 {
	if x != nil && x.Voted != nil {
		return *x.Voted
	}
	return 0
}

func (x *PollResponse) GetResponses() map[string]string {
	if x != nil {
		return x.Responses
	}
	return nil
}

func (x *PollResponse) GetPolls() []*PollInfo {
	if x != nil {
		return x.Polls
	}
	return nil
}

func (x *PollResponse) GetStats() *PollsStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *PollResponse) GetTotalPolls() uint64 {
	if x != nil && x.TotalPolls != nil {
		return *x.TotalPolls
	}
	return 0
}

func (x *PollResponse) GetTotalRunning() uint64 {
	if x != nil && x.TotalRunning != nil {
		return *x.TotalRunning
	}
	return 0
}

func (x *PollResponse) GetPollResponsesResult() *PollResponsesResult {
	if x != nil {
		return x.PollResponsesResult
	}
	return nil
}

var File_plugnmeet_polls_proto protoreflect.FileDescriptor

var file_plugnmeet_polls_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65,
	0x65, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x37, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xfc, 0x01, 0x0a,
	0x08, 0x50, 0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x42, 0x79, 0x22, 0x9f, 0x01, 0x0a, 0x15,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f,
	0x6c, 0x6c, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a,
	0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x1a, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x76, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x50, 0x6f,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d,
	0x65, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x52, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x6c, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x99, 0x05, 0x0a, 0x0c,
	0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x6c, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x02, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x50,
	0x6f, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x30,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x48, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x48, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f,
	0x6c, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01,
	0x12, 0x57, 0x0a, 0x15, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x06, 0x52, 0x13, 0x70, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x6f, 0x6c, 0x6c,
	0x5f, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x6f, 0x74, 0x65,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x79, 0x6e, 0x61, 0x70, 0x61, 0x72, 0x72, 0x6f, 0x74,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugnmeet_polls_proto_rawDescOnce sync.Once
	file_plugnmeet_polls_proto_rawDescData = file_plugnmeet_polls_proto_rawDesc
)

func file_plugnmeet_polls_proto_rawDescGZIP() []byte {
	file_plugnmeet_polls_proto_rawDescOnce.Do(func() {
		file_plugnmeet_polls_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugnmeet_polls_proto_rawDescData)
	})
	return file_plugnmeet_polls_proto_rawDescData
}

var file_plugnmeet_polls_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_plugnmeet_polls_proto_goTypes = []interface{}{
	(*CreatePollReq)(nil),              // 0: plugnmeet.CreatePollReq
	(*CreatePollOptions)(nil),          // 1: plugnmeet.CreatePollOptions
	(*PollInfo)(nil),                   // 2: plugnmeet.PollInfo
	(*SubmitPollResponseReq)(nil),      // 3: plugnmeet.SubmitPollResponseReq
	(*ClosePollReq)(nil),               // 4: plugnmeet.ClosePollReq
	(*PollResponsesResultOptions)(nil), // 5: plugnmeet.PollResponsesResultOptions
	(*PollResponsesResult)(nil),        // 6: plugnmeet.PollResponsesResult
	(*PollsStats)(nil),                 // 7: plugnmeet.PollsStats
	(*PollResponse)(nil),               // 8: plugnmeet.PollResponse
	nil,                                // 9: plugnmeet.PollResponse.ResponsesEntry
}
var file_plugnmeet_polls_proto_depIdxs = []int32{
	1, // 0: plugnmeet.CreatePollReq.options:type_name -> plugnmeet.CreatePollOptions
	1, // 1: plugnmeet.PollInfo.options:type_name -> plugnmeet.CreatePollOptions
	5, // 2: plugnmeet.PollResponsesResult.options:type_name -> plugnmeet.PollResponsesResultOptions
	9, // 3: plugnmeet.PollResponse.responses:type_name -> plugnmeet.PollResponse.ResponsesEntry
	2, // 4: plugnmeet.PollResponse.polls:type_name -> plugnmeet.PollInfo
	7, // 5: plugnmeet.PollResponse.stats:type_name -> plugnmeet.PollsStats
	6, // 6: plugnmeet.PollResponse.poll_responses_result:type_name -> plugnmeet.PollResponsesResult
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_plugnmeet_polls_proto_init() }
func file_plugnmeet_polls_proto_init() {
	if File_plugnmeet_polls_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plugnmeet_polls_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePollReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_polls_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePollOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_polls_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_polls_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitPollResponseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_polls_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosePollReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_polls_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollResponsesResultOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_polls_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollResponsesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_polls_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollsStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_polls_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_plugnmeet_polls_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugnmeet_polls_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugnmeet_polls_proto_goTypes,
		DependencyIndexes: file_plugnmeet_polls_proto_depIdxs,
		MessageInfos:      file_plugnmeet_polls_proto_msgTypes,
	}.Build()
	File_plugnmeet_polls_proto = out.File
	file_plugnmeet_polls_proto_rawDesc = nil
	file_plugnmeet_polls_proto_goTypes = nil
	file_plugnmeet_polls_proto_depIdxs = nil
}
