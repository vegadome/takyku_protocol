// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugnmeet_gen_token.proto

package plugnmeet

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GenerateTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateTokenReqMultiError, or nil if none found.
func (m *GenerateTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomId

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateTokenReqValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateTokenReqValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateTokenReqValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateTokenReqMultiError(errors)
	}

	return nil
}

// GenerateTokenReqMultiError is an error wrapping multiple validation errors
// returned by GenerateTokenReq.ValidateAll() if the designated constraints
// aren't met.
type GenerateTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateTokenReqMultiError) AllErrors() []error { return m }

// GenerateTokenReqValidationError is the validation error returned by
// GenerateTokenReq.Validate if the designated constraints aren't met.
type GenerateTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateTokenReqValidationError) ErrorName() string { return "GenerateTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e GenerateTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateTokenReqValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for UserId

	// no validation rules for IsAdmin

	// no validation rules for IsHidden

	if all {
		switch v := interface{}(m.GetUserMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserInfoValidationError{
					field:  "UserMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserInfoValidationError{
					field:  "UserMetadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoValidationError{
				field:  "UserMetadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on UserMetadata with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserMetadata) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserMetadata with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserMetadataMultiError, or
// nil if none found.
func (m *UserMetadata) ValidateAll() error {
	return m.validate(true)
}

func (m *UserMetadata) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAdmin

	// no validation rules for IsPresenter

	// no validation rules for RaisedHand

	// no validation rules for WaitForApproval

	if all {
		switch v := interface{}(m.GetLockSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserMetadataValidationError{
					field:  "LockSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserMetadataValidationError{
					field:  "LockSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLockSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserMetadataValidationError{
				field:  "LockSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.ProfilePic != nil {
		// no validation rules for ProfilePic
	}

	if m.RecordWebcam != nil {
		// no validation rules for RecordWebcam
	}

	if m.MetadataId != nil {
		// no validation rules for MetadataId
	}

	if len(errors) > 0 {
		return UserMetadataMultiError(errors)
	}

	return nil
}

// UserMetadataMultiError is an error wrapping multiple validation errors
// returned by UserMetadata.ValidateAll() if the designated constraints aren't met.
type UserMetadataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMetadataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMetadataMultiError) AllErrors() []error { return m }

// UserMetadataValidationError is the validation error returned by
// UserMetadata.Validate if the designated constraints aren't met.
type UserMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserMetadataValidationError) ErrorName() string { return "UserMetadataValidationError" }

// Error satisfies the builtin error interface
func (e UserMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserMetadataValidationError{}

// Validate checks the field values on PlugNmeetTokenClaims with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlugNmeetTokenClaims) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlugNmeetTokenClaims with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlugNmeetTokenClaimsMultiError, or nil if none found.
func (m *PlugNmeetTokenClaims) ValidateAll() error {
	return m.validate(true)
}

func (m *PlugNmeetTokenClaims) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for UserId

	// no validation rules for RoomId

	// no validation rules for IsAdmin

	// no validation rules for IsHidden

	if len(errors) > 0 {
		return PlugNmeetTokenClaimsMultiError(errors)
	}

	return nil
}

// PlugNmeetTokenClaimsMultiError is an error wrapping multiple validation
// errors returned by PlugNmeetTokenClaims.ValidateAll() if the designated
// constraints aren't met.
type PlugNmeetTokenClaimsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlugNmeetTokenClaimsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlugNmeetTokenClaimsMultiError) AllErrors() []error { return m }

// PlugNmeetTokenClaimsValidationError is the validation error returned by
// PlugNmeetTokenClaims.Validate if the designated constraints aren't met.
type PlugNmeetTokenClaimsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlugNmeetTokenClaimsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlugNmeetTokenClaimsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlugNmeetTokenClaimsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlugNmeetTokenClaimsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlugNmeetTokenClaimsValidationError) ErrorName() string {
	return "PlugNmeetTokenClaimsValidationError"
}

// Error satisfies the builtin error interface
func (e PlugNmeetTokenClaimsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugNmeetTokenClaims.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlugNmeetTokenClaimsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlugNmeetTokenClaimsValidationError{}

// Validate checks the field values on LockSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LockSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LockSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LockSettingsMultiError, or
// nil if none found.
func (m *LockSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *LockSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.LockMicrophone != nil {
		// no validation rules for LockMicrophone
	}

	if m.LockWebcam != nil {
		// no validation rules for LockWebcam
	}

	if m.LockScreenSharing != nil {
		// no validation rules for LockScreenSharing
	}

	if m.LockChat != nil {
		// no validation rules for LockChat
	}

	if m.LockChatSendMessage != nil {
		// no validation rules for LockChatSendMessage
	}

	if m.LockChatFileShare != nil {
		// no validation rules for LockChatFileShare
	}

	if m.LockPrivateChat != nil {
		// no validation rules for LockPrivateChat
	}

	if m.LockWhiteboard != nil {
		// no validation rules for LockWhiteboard
	}

	if m.LockSharedNotepad != nil {
		// no validation rules for LockSharedNotepad
	}

	if len(errors) > 0 {
		return LockSettingsMultiError(errors)
	}

	return nil
}

// LockSettingsMultiError is an error wrapping multiple validation errors
// returned by LockSettings.ValidateAll() if the designated constraints aren't met.
type LockSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LockSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LockSettingsMultiError) AllErrors() []error { return m }

// LockSettingsValidationError is the validation error returned by
// LockSettings.Validate if the designated constraints aren't met.
type LockSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockSettingsValidationError) ErrorName() string { return "LockSettingsValidationError" }

// Error satisfies the builtin error interface
func (e LockSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockSettingsValidationError{}

// Validate checks the field values on GenerateTokenRes with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GenerateTokenRes) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateTokenRes with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateTokenResMultiError, or nil if none found.
func (m *GenerateTokenRes) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateTokenRes) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Msg

	if m.Token != nil {
		// no validation rules for Token
	}

	if len(errors) > 0 {
		return GenerateTokenResMultiError(errors)
	}

	return nil
}

// GenerateTokenResMultiError is an error wrapping multiple validation errors
// returned by GenerateTokenRes.ValidateAll() if the designated constraints
// aren't met.
type GenerateTokenResMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateTokenResMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateTokenResMultiError) AllErrors() []error { return m }

// GenerateTokenResValidationError is the validation error returned by
// GenerateTokenRes.Validate if the designated constraints aren't met.
type GenerateTokenResValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateTokenResValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateTokenResValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateTokenResValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateTokenResValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateTokenResValidationError) ErrorName() string { return "GenerateTokenResValidationError" }

// Error satisfies the builtin error interface
func (e GenerateTokenResValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateTokenRes.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateTokenResValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateTokenResValidationError{}
