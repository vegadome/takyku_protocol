// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: plugnmeet_create_room.proto

package plugnmeet

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	livekit "github.com/livekit/protocol/livekit"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateRoomReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId          string        `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	EmptyTimeout    *uint32       `protobuf:"varint,2,opt,name=empty_timeout,json=emptyTimeout,proto3,oneof" json:"empty_timeout,omitempty"`
	MaxParticipants *uint32       `protobuf:"varint,3,opt,name=max_participants,json=maxParticipants,proto3,oneof" json:"max_participants,omitempty"`
	Metadata        *RoomMetadata `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *CreateRoomReq) Reset() {
	*x = CreateRoomReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoomReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomReq) ProtoMessage() {}

func (x *CreateRoomReq) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomReq.ProtoReflect.Descriptor instead.
func (*CreateRoomReq) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRoomReq) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *CreateRoomReq) GetEmptyTimeout() uint32 {
	if x != nil && x.EmptyTimeout != nil {
		return *x.EmptyTimeout
	}
	return 0
}

func (x *CreateRoomReq) GetMaxParticipants() uint32 {
	if x != nil && x.MaxParticipants != nil {
		return *x.MaxParticipants
	}
	return 0
}

func (x *CreateRoomReq) GetMetadata() *RoomMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type RoomMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomTitle           string              `protobuf:"bytes,1,opt,name=room_title,json=roomTitle,proto3" json:"room_title,omitempty"`
	WelcomeMessage      *string             `protobuf:"bytes,2,opt,name=welcome_message,json=welcomeMessage,proto3,oneof" json:"welcome_message,omitempty"`
	IsRecording         bool                `protobuf:"varint,3,opt,name=is_recording,json=isRecording,proto3" json:"is_recording,omitempty"`
	IsActiveRtmp        bool                `protobuf:"varint,4,opt,name=is_active_rtmp,json=isActiveRtmp,proto3" json:"is_active_rtmp,omitempty"`
	ParentRoomId        string              `protobuf:"bytes,5,opt,name=parent_room_id,json=parentRoomId,proto3" json:"parent_room_id,omitempty"`
	IsBreakoutRoom      bool                `protobuf:"varint,6,opt,name=is_breakout_room,json=isBreakoutRoom,proto3" json:"is_breakout_room,omitempty"`
	WebhookUrl          *string             `protobuf:"bytes,7,opt,name=webhook_url,json=webhookUrl,proto3,oneof" json:"webhook_url,omitempty"`
	StartedAt           uint64              `protobuf:"varint,8,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	LogoutUrl           *string             `protobuf:"bytes,9,opt,name=logout_url,json=logoutUrl,proto3,oneof" json:"logout_url,omitempty"`
	RoomFeatures        *RoomCreateFeatures `protobuf:"bytes,10,opt,name=room_features,json=roomFeatures,proto3" json:"room_features,omitempty"`
	DefaultLockSettings *LockSettings       `protobuf:"bytes,11,opt,name=default_lock_settings,json=defaultLockSettings,proto3" json:"default_lock_settings,omitempty"`
	CopyrightConf       *CopyrightConf      `protobuf:"bytes,12,opt,name=copyright_conf,json=copyrightConf,proto3" json:"copyright_conf,omitempty"`
	// we'll use this as version control
	MetadataId *string `protobuf:"bytes,13,opt,name=metadata_id,json=metadataId,proto3,oneof" json:"metadata_id,omitempty"`
	ExtraData  *string `protobuf:"bytes,14,opt,name=extra_data,json=extraData,proto3,oneof" json:"extra_data,omitempty"`
}

func (x *RoomMetadata) Reset() {
	*x = RoomMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomMetadata) ProtoMessage() {}

func (x *RoomMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomMetadata.ProtoReflect.Descriptor instead.
func (*RoomMetadata) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{1}
}

func (x *RoomMetadata) GetRoomTitle() string {
	if x != nil {
		return x.RoomTitle
	}
	return ""
}

func (x *RoomMetadata) GetWelcomeMessage() string {
	if x != nil && x.WelcomeMessage != nil {
		return *x.WelcomeMessage
	}
	return ""
}

func (x *RoomMetadata) GetIsRecording() bool {
	if x != nil {
		return x.IsRecording
	}
	return false
}

func (x *RoomMetadata) GetIsActiveRtmp() bool {
	if x != nil {
		return x.IsActiveRtmp
	}
	return false
}

func (x *RoomMetadata) GetParentRoomId() string {
	if x != nil {
		return x.ParentRoomId
	}
	return ""
}

func (x *RoomMetadata) GetIsBreakoutRoom() bool {
	if x != nil {
		return x.IsBreakoutRoom
	}
	return false
}

func (x *RoomMetadata) GetWebhookUrl() string {
	if x != nil && x.WebhookUrl != nil {
		return *x.WebhookUrl
	}
	return ""
}

func (x *RoomMetadata) GetStartedAt() uint64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *RoomMetadata) GetLogoutUrl() string {
	if x != nil && x.LogoutUrl != nil {
		return *x.LogoutUrl
	}
	return ""
}

func (x *RoomMetadata) GetRoomFeatures() *RoomCreateFeatures {
	if x != nil {
		return x.RoomFeatures
	}
	return nil
}

func (x *RoomMetadata) GetDefaultLockSettings() *LockSettings {
	if x != nil {
		return x.DefaultLockSettings
	}
	return nil
}

func (x *RoomMetadata) GetCopyrightConf() *CopyrightConf {
	if x != nil {
		return x.CopyrightConf
	}
	return nil
}

func (x *RoomMetadata) GetMetadataId() string {
	if x != nil && x.MetadataId != nil {
		return *x.MetadataId
	}
	return ""
}

func (x *RoomMetadata) GetExtraData() string {
	if x != nil && x.ExtraData != nil {
		return *x.ExtraData
	}
	return ""
}

type RoomCreateFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowWebcams                    bool                             `protobuf:"varint,1,opt,name=allow_webcams,json=allowWebcams,proto3" json:"allow_webcams,omitempty"`
	MuteOnStart                     bool                             `protobuf:"varint,2,opt,name=mute_on_start,json=muteOnStart,proto3" json:"mute_on_start,omitempty"`
	AllowScreenShare                bool                             `protobuf:"varint,3,opt,name=allow_screen_share,json=allowScreenShare,proto3" json:"allow_screen_share,omitempty"`
	AllowRtmp                       bool                             `protobuf:"varint,5,opt,name=allow_rtmp,json=allowRtmp,proto3" json:"allow_rtmp,omitempty"`
	AllowViewOtherWebcams           bool                             `protobuf:"varint,6,opt,name=allow_view_other_webcams,json=allowViewOtherWebcams,proto3" json:"allow_view_other_webcams,omitempty"`
	AllowViewOtherUsersList         bool                             `protobuf:"varint,7,opt,name=allow_view_other_users_list,json=allowViewOtherUsersList,proto3" json:"allow_view_other_users_list,omitempty"`
	AdminOnlyWebcams                bool                             `protobuf:"varint,8,opt,name=admin_only_webcams,json=adminOnlyWebcams,proto3" json:"admin_only_webcams,omitempty"`
	AllowPolls                      bool                             `protobuf:"varint,9,opt,name=allow_polls,json=allowPolls,proto3" json:"allow_polls,omitempty"`
	RoomDuration                    *uint64                          `protobuf:"varint,10,opt,name=room_duration,json=roomDuration,proto3,oneof" json:"room_duration,omitempty"`
	EnableAnalytics                 bool                             `protobuf:"varint,22,opt,name=enable_analytics,json=enableAnalytics,proto3" json:"enable_analytics,omitempty"`
	RecordingFeatures               *RecordingFeatures               `protobuf:"bytes,11,opt,name=recording_features,json=recordingFeatures,proto3" json:"recording_features,omitempty"`
	ChatFeatures                    *ChatFeatures                    `protobuf:"bytes,12,opt,name=chat_features,json=chatFeatures,proto3" json:"chat_features,omitempty"`
	SharedNotePadFeatures           *SharedNotePadFeatures           `protobuf:"bytes,13,opt,name=shared_note_pad_features,json=sharedNotePadFeatures,proto3" json:"shared_note_pad_features,omitempty"`
	WhiteboardFeatures              *WhiteboardFeatures              `protobuf:"bytes,14,opt,name=whiteboard_features,json=whiteboardFeatures,proto3" json:"whiteboard_features,omitempty"`
	ExternalMediaPlayerFeatures     *ExternalMediaPlayerFeatures     `protobuf:"bytes,15,opt,name=external_media_player_features,json=externalMediaPlayerFeatures,proto3" json:"external_media_player_features,omitempty"`
	WaitingRoomFeatures             *WaitingRoomFeatures             `protobuf:"bytes,16,opt,name=waiting_room_features,json=waitingRoomFeatures,proto3" json:"waiting_room_features,omitempty"`
	BreakoutRoomFeatures            *BreakoutRoomFeatures            `protobuf:"bytes,17,opt,name=breakout_room_features,json=breakoutRoomFeatures,proto3" json:"breakout_room_features,omitempty"`
	DisplayExternalLinkFeatures     *DisplayExternalLinkFeatures     `protobuf:"bytes,18,opt,name=display_external_link_features,json=displayExternalLinkFeatures,proto3" json:"display_external_link_features,omitempty"`
	IngressFeatures                 *IngressFeatures                 `protobuf:"bytes,19,opt,name=ingress_features,json=ingressFeatures,proto3" json:"ingress_features,omitempty"`
	SpeechToTextTranslationFeatures *SpeechToTextTranslationFeatures `protobuf:"bytes,20,opt,name=speech_to_text_translation_features,json=speechToTextTranslationFeatures,proto3" json:"speech_to_text_translation_features,omitempty"`
	EndToEndEncryptionFeatures      *EndToEndEncryptionFeatures      `protobuf:"bytes,21,opt,name=end_to_end_encryption_features,json=endToEndEncryptionFeatures,proto3" json:"end_to_end_encryption_features,omitempty"` // next ID: 23
}

func (x *RoomCreateFeatures) Reset() {
	*x = RoomCreateFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomCreateFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomCreateFeatures) ProtoMessage() {}

func (x *RoomCreateFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomCreateFeatures.ProtoReflect.Descriptor instead.
func (*RoomCreateFeatures) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{2}
}

func (x *RoomCreateFeatures) GetAllowWebcams() bool {
	if x != nil {
		return x.AllowWebcams
	}
	return false
}

func (x *RoomCreateFeatures) GetMuteOnStart() bool {
	if x != nil {
		return x.MuteOnStart
	}
	return false
}

func (x *RoomCreateFeatures) GetAllowScreenShare() bool {
	if x != nil {
		return x.AllowScreenShare
	}
	return false
}

func (x *RoomCreateFeatures) GetAllowRtmp() bool {
	if x != nil {
		return x.AllowRtmp
	}
	return false
}

func (x *RoomCreateFeatures) GetAllowViewOtherWebcams() bool {
	if x != nil {
		return x.AllowViewOtherWebcams
	}
	return false
}

func (x *RoomCreateFeatures) GetAllowViewOtherUsersList() bool {
	if x != nil {
		return x.AllowViewOtherUsersList
	}
	return false
}

func (x *RoomCreateFeatures) GetAdminOnlyWebcams() bool {
	if x != nil {
		return x.AdminOnlyWebcams
	}
	return false
}

func (x *RoomCreateFeatures) GetAllowPolls() bool {
	if x != nil {
		return x.AllowPolls
	}
	return false
}

func (x *RoomCreateFeatures) GetRoomDuration() uint64 {
	if x != nil && x.RoomDuration != nil {
		return *x.RoomDuration
	}
	return 0
}

func (x *RoomCreateFeatures) GetEnableAnalytics() bool {
	if x != nil {
		return x.EnableAnalytics
	}
	return false
}

func (x *RoomCreateFeatures) GetRecordingFeatures() *RecordingFeatures {
	if x != nil {
		return x.RecordingFeatures
	}
	return nil
}

func (x *RoomCreateFeatures) GetChatFeatures() *ChatFeatures {
	if x != nil {
		return x.ChatFeatures
	}
	return nil
}

func (x *RoomCreateFeatures) GetSharedNotePadFeatures() *SharedNotePadFeatures {
	if x != nil {
		return x.SharedNotePadFeatures
	}
	return nil
}

func (x *RoomCreateFeatures) GetWhiteboardFeatures() *WhiteboardFeatures {
	if x != nil {
		return x.WhiteboardFeatures
	}
	return nil
}

func (x *RoomCreateFeatures) GetExternalMediaPlayerFeatures() *ExternalMediaPlayerFeatures {
	if x != nil {
		return x.ExternalMediaPlayerFeatures
	}
	return nil
}

func (x *RoomCreateFeatures) GetWaitingRoomFeatures() *WaitingRoomFeatures {
	if x != nil {
		return x.WaitingRoomFeatures
	}
	return nil
}

func (x *RoomCreateFeatures) GetBreakoutRoomFeatures() *BreakoutRoomFeatures {
	if x != nil {
		return x.BreakoutRoomFeatures
	}
	return nil
}

func (x *RoomCreateFeatures) GetDisplayExternalLinkFeatures() *DisplayExternalLinkFeatures {
	if x != nil {
		return x.DisplayExternalLinkFeatures
	}
	return nil
}

func (x *RoomCreateFeatures) GetIngressFeatures() *IngressFeatures {
	if x != nil {
		return x.IngressFeatures
	}
	return nil
}

func (x *RoomCreateFeatures) GetSpeechToTextTranslationFeatures() *SpeechToTextTranslationFeatures {
	if x != nil {
		return x.SpeechToTextTranslationFeatures
	}
	return nil
}

func (x *RoomCreateFeatures) GetEndToEndEncryptionFeatures() *EndToEndEncryptionFeatures {
	if x != nil {
		return x.EndToEndEncryptionFeatures
	}
	return nil
}

type ChatFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowChat        bool     `protobuf:"varint,1,opt,name=allow_chat,json=allowChat,proto3" json:"allow_chat,omitempty"`
	AllowFileUpload  bool     `protobuf:"varint,2,opt,name=allow_file_upload,json=allowFileUpload,proto3" json:"allow_file_upload,omitempty"`
	AllowedFileTypes []string `protobuf:"bytes,3,rep,name=allowed_file_types,json=allowedFileTypes,proto3" json:"allowed_file_types,omitempty"`
	MaxFileSize      *uint64  `protobuf:"varint,4,opt,name=max_file_size,json=maxFileSize,proto3,oneof" json:"max_file_size,omitempty"`
}

func (x *ChatFeatures) Reset() {
	*x = ChatFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatFeatures) ProtoMessage() {}

func (x *ChatFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatFeatures.ProtoReflect.Descriptor instead.
func (*ChatFeatures) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{3}
}

func (x *ChatFeatures) GetAllowChat() bool {
	if x != nil {
		return x.AllowChat
	}
	return false
}

func (x *ChatFeatures) GetAllowFileUpload() bool {
	if x != nil {
		return x.AllowFileUpload
	}
	return false
}

func (x *ChatFeatures) GetAllowedFileTypes() []string {
	if x != nil {
		return x.AllowedFileTypes
	}
	return nil
}

func (x *ChatFeatures) GetMaxFileSize() uint64 {
	if x != nil && x.MaxFileSize != nil {
		return *x.MaxFileSize
	}
	return 0
}

type SharedNotePadFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedSharedNotePad bool   `protobuf:"varint,1,opt,name=allowed_shared_note_pad,json=allowedSharedNotePad,proto3" json:"allowed_shared_note_pad,omitempty"`
	IsActive             bool   `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Visible              bool   `protobuf:"varint,3,opt,name=visible,proto3" json:"visible,omitempty"`
	NodeId               string `protobuf:"bytes,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Host                 string `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	NotePadId            string `protobuf:"bytes,6,opt,name=note_pad_id,json=notePadId,proto3" json:"note_pad_id,omitempty"`
	ReadOnlyPadId        string `protobuf:"bytes,7,opt,name=read_only_pad_id,json=readOnlyPadId,proto3" json:"read_only_pad_id,omitempty"`
}

func (x *SharedNotePadFeatures) Reset() {
	*x = SharedNotePadFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SharedNotePadFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedNotePadFeatures) ProtoMessage() {}

func (x *SharedNotePadFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedNotePadFeatures.ProtoReflect.Descriptor instead.
func (*SharedNotePadFeatures) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{4}
}

func (x *SharedNotePadFeatures) GetAllowedSharedNotePad() bool {
	if x != nil {
		return x.AllowedSharedNotePad
	}
	return false
}

func (x *SharedNotePadFeatures) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *SharedNotePadFeatures) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *SharedNotePadFeatures) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *SharedNotePadFeatures) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SharedNotePadFeatures) GetNotePadId() string {
	if x != nil {
		return x.NotePadId
	}
	return ""
}

func (x *SharedNotePadFeatures) GetReadOnlyPadId() string {
	if x != nil {
		return x.ReadOnlyPadId
	}
	return ""
}

type WhiteboardFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedWhiteboard bool    `protobuf:"varint,1,opt,name=allowed_whiteboard,json=allowedWhiteboard,proto3" json:"allowed_whiteboard,omitempty"`
	Visible           bool    `protobuf:"varint,2,opt,name=visible,proto3" json:"visible,omitempty"`
	PreloadFile       *string `protobuf:"bytes,3,opt,name=preload_file,json=preloadFile,proto3,oneof" json:"preload_file,omitempty"`
	WhiteboardFileId  string  `protobuf:"bytes,4,opt,name=whiteboard_file_id,json=whiteboardFileId,proto3" json:"whiteboard_file_id,omitempty"`
	FileName          string  `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FilePath          string  `protobuf:"bytes,6,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	TotalPages        uint32  `protobuf:"varint,7,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
}

func (x *WhiteboardFeatures) Reset() {
	*x = WhiteboardFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WhiteboardFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WhiteboardFeatures) ProtoMessage() {}

func (x *WhiteboardFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WhiteboardFeatures.ProtoReflect.Descriptor instead.
func (*WhiteboardFeatures) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{5}
}

func (x *WhiteboardFeatures) GetAllowedWhiteboard() bool {
	if x != nil {
		return x.AllowedWhiteboard
	}
	return false
}

func (x *WhiteboardFeatures) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *WhiteboardFeatures) GetPreloadFile() string {
	if x != nil && x.PreloadFile != nil {
		return *x.PreloadFile
	}
	return ""
}

func (x *WhiteboardFeatures) GetWhiteboardFileId() string {
	if x != nil {
		return x.WhiteboardFileId
	}
	return ""
}

func (x *WhiteboardFeatures) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *WhiteboardFeatures) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *WhiteboardFeatures) GetTotalPages() uint32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

type ExternalMediaPlayerFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowedExternalMediaPlayer bool    `protobuf:"varint,1,opt,name=allowed_external_media_player,json=allowedExternalMediaPlayer,proto3" json:"allowed_external_media_player,omitempty"`
	IsActive                   bool    `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	SharedBy                   *string `protobuf:"bytes,3,opt,name=shared_by,json=sharedBy,proto3,oneof" json:"shared_by,omitempty"`
	Url                        *string `protobuf:"bytes,4,opt,name=url,proto3,oneof" json:"url,omitempty"`
}

func (x *ExternalMediaPlayerFeatures) Reset() {
	*x = ExternalMediaPlayerFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalMediaPlayerFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalMediaPlayerFeatures) ProtoMessage() {}

func (x *ExternalMediaPlayerFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalMediaPlayerFeatures.ProtoReflect.Descriptor instead.
func (*ExternalMediaPlayerFeatures) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{6}
}

func (x *ExternalMediaPlayerFeatures) GetAllowedExternalMediaPlayer() bool {
	if x != nil {
		return x.AllowedExternalMediaPlayer
	}
	return false
}

func (x *ExternalMediaPlayerFeatures) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ExternalMediaPlayerFeatures) GetSharedBy() string {
	if x != nil && x.SharedBy != nil {
		return *x.SharedBy
	}
	return ""
}

func (x *ExternalMediaPlayerFeatures) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type WaitingRoomFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsActive       bool   `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	WaitingRoomMsg string `protobuf:"bytes,2,opt,name=waiting_room_msg,json=waitingRoomMsg,proto3" json:"waiting_room_msg,omitempty"`
}

func (x *WaitingRoomFeatures) Reset() {
	*x = WaitingRoomFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitingRoomFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitingRoomFeatures) ProtoMessage() {}

func (x *WaitingRoomFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitingRoomFeatures.ProtoReflect.Descriptor instead.
func (*WaitingRoomFeatures) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{7}
}

func (x *WaitingRoomFeatures) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *WaitingRoomFeatures) GetWaitingRoomMsg() string {
	if x != nil {
		return x.WaitingRoomMsg
	}
	return ""
}

type BreakoutRoomFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAllow            bool   `protobuf:"varint,1,opt,name=is_allow,json=isAllow,proto3" json:"is_allow,omitempty"`
	IsActive           bool   `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	AllowedNumberRooms uint32 `protobuf:"varint,3,opt,name=allowed_number_rooms,json=allowedNumberRooms,proto3" json:"allowed_number_rooms,omitempty"`
}

func (x *BreakoutRoomFeatures) Reset() {
	*x = BreakoutRoomFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BreakoutRoomFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BreakoutRoomFeatures) ProtoMessage() {}

func (x *BreakoutRoomFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BreakoutRoomFeatures.ProtoReflect.Descriptor instead.
func (*BreakoutRoomFeatures) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{8}
}

func (x *BreakoutRoomFeatures) GetIsAllow() bool {
	if x != nil {
		return x.IsAllow
	}
	return false
}

func (x *BreakoutRoomFeatures) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *BreakoutRoomFeatures) GetAllowedNumberRooms() uint32 {
	if x != nil {
		return x.AllowedNumberRooms
	}
	return 0
}

type DisplayExternalLinkFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAllow  bool    `protobuf:"varint,1,opt,name=is_allow,json=isAllow,proto3" json:"is_allow,omitempty"`
	IsActive bool    `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Link     *string `protobuf:"bytes,3,opt,name=link,proto3,oneof" json:"link,omitempty"`
	SharedBy *string `protobuf:"bytes,4,opt,name=shared_by,json=sharedBy,proto3,oneof" json:"shared_by,omitempty"`
}

func (x *DisplayExternalLinkFeatures) Reset() {
	*x = DisplayExternalLinkFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayExternalLinkFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayExternalLinkFeatures) ProtoMessage() {}

func (x *DisplayExternalLinkFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayExternalLinkFeatures.ProtoReflect.Descriptor instead.
func (*DisplayExternalLinkFeatures) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{9}
}

func (x *DisplayExternalLinkFeatures) GetIsAllow() bool {
	if x != nil {
		return x.IsAllow
	}
	return false
}

func (x *DisplayExternalLinkFeatures) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *DisplayExternalLinkFeatures) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *DisplayExternalLinkFeatures) GetSharedBy() string {
	if x != nil && x.SharedBy != nil {
		return *x.SharedBy
	}
	return ""
}

type RecordingFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAllow                  bool `protobuf:"varint,1,opt,name=is_allow,json=isAllow,proto3" json:"is_allow,omitempty"`
	IsAllowCloud             bool `protobuf:"varint,2,opt,name=is_allow_cloud,json=isAllowCloud,proto3" json:"is_allow_cloud,omitempty"`
	EnableAutoCloudRecording bool `protobuf:"varint,3,opt,name=enable_auto_cloud_recording,json=enableAutoCloudRecording,proto3" json:"enable_auto_cloud_recording,omitempty"`
	IsAllowLocal             bool `protobuf:"varint,4,opt,name=is_allow_local,json=isAllowLocal,proto3" json:"is_allow_local,omitempty"`
	OnlyRecordAdminWebcams   bool `protobuf:"varint,5,opt,name=only_record_admin_webcams,json=onlyRecordAdminWebcams,proto3" json:"only_record_admin_webcams,omitempty"`
}

func (x *RecordingFeatures) Reset() {
	*x = RecordingFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingFeatures) ProtoMessage() {}

func (x *RecordingFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingFeatures.ProtoReflect.Descriptor instead.
func (*RecordingFeatures) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{10}
}

func (x *RecordingFeatures) GetIsAllow() bool {
	if x != nil {
		return x.IsAllow
	}
	return false
}

func (x *RecordingFeatures) GetIsAllowCloud() bool {
	if x != nil {
		return x.IsAllowCloud
	}
	return false
}

func (x *RecordingFeatures) GetEnableAutoCloudRecording() bool {
	if x != nil {
		return x.EnableAutoCloudRecording
	}
	return false
}

func (x *RecordingFeatures) GetIsAllowLocal() bool {
	if x != nil {
		return x.IsAllowLocal
	}
	return false
}

func (x *RecordingFeatures) GetOnlyRecordAdminWebcams() bool {
	if x != nil {
		return x.OnlyRecordAdminWebcams
	}
	return false
}

type IngressFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAllow   bool         `protobuf:"varint,1,opt,name=is_allow,json=isAllow,proto3" json:"is_allow,omitempty"`
	InputType IngressInput `protobuf:"varint,2,opt,name=input_type,json=inputType,proto3,enum=plugnmeet.IngressInput" json:"input_type,omitempty"`
	Url       string       `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	StreamKey string       `protobuf:"bytes,4,opt,name=stream_key,json=streamKey,proto3" json:"stream_key,omitempty"`
}

func (x *IngressFeatures) Reset() {
	*x = IngressFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngressFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngressFeatures) ProtoMessage() {}

func (x *IngressFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngressFeatures.ProtoReflect.Descriptor instead.
func (*IngressFeatures) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{11}
}

func (x *IngressFeatures) GetIsAllow() bool {
	if x != nil {
		return x.IsAllow
	}
	return false
}

func (x *IngressFeatures) GetInputType() IngressInput {
	if x != nil {
		return x.InputType
	}
	return IngressInput_RTMP_INPUT
}

func (x *IngressFeatures) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *IngressFeatures) GetStreamKey() string {
	if x != nil {
		return x.StreamKey
	}
	return ""
}

type SpeechToTextTranslationFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsAllow              bool     `protobuf:"varint,1,opt,name=is_allow,json=isAllow,proto3" json:"is_allow,omitempty"`
	IsAllowTranslation   bool     `protobuf:"varint,2,opt,name=is_allow_translation,json=isAllowTranslation,proto3" json:"is_allow_translation,omitempty"`
	IsEnabled            bool     `protobuf:"varint,3,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	IsEnabledTranslation bool     `protobuf:"varint,4,opt,name=is_enabled_translation,json=isEnabledTranslation,proto3" json:"is_enabled_translation,omitempty"`
	AllowedSpeechLangs   []string `protobuf:"bytes,7,rep,name=allowed_speech_langs,json=allowedSpeechLangs,proto3" json:"allowed_speech_langs,omitempty"`
	AllowedSpeechUsers   []string `protobuf:"bytes,8,rep,name=allowed_speech_users,json=allowedSpeechUsers,proto3" json:"allowed_speech_users,omitempty"`
	AllowedTransLangs    []string `protobuf:"bytes,9,rep,name=allowed_trans_langs,json=allowedTransLangs,proto3" json:"allowed_trans_langs,omitempty"`
	DefaultSubtitleLang  *string  `protobuf:"bytes,10,opt,name=default_subtitle_lang,json=defaultSubtitleLang,proto3,oneof" json:"default_subtitle_lang,omitempty"`
}

func (x *SpeechToTextTranslationFeatures) Reset() {
	*x = SpeechToTextTranslationFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpeechToTextTranslationFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpeechToTextTranslationFeatures) ProtoMessage() {}

func (x *SpeechToTextTranslationFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpeechToTextTranslationFeatures.ProtoReflect.Descriptor instead.
func (*SpeechToTextTranslationFeatures) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{12}
}

func (x *SpeechToTextTranslationFeatures) GetIsAllow() bool {
	if x != nil {
		return x.IsAllow
	}
	return false
}

func (x *SpeechToTextTranslationFeatures) GetIsAllowTranslation() bool {
	if x != nil {
		return x.IsAllowTranslation
	}
	return false
}

func (x *SpeechToTextTranslationFeatures) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *SpeechToTextTranslationFeatures) GetIsEnabledTranslation() bool {
	if x != nil {
		return x.IsEnabledTranslation
	}
	return false
}

func (x *SpeechToTextTranslationFeatures) GetAllowedSpeechLangs() []string {
	if x != nil {
		return x.AllowedSpeechLangs
	}
	return nil
}

func (x *SpeechToTextTranslationFeatures) GetAllowedSpeechUsers() []string {
	if x != nil {
		return x.AllowedSpeechUsers
	}
	return nil
}

func (x *SpeechToTextTranslationFeatures) GetAllowedTransLangs() []string {
	if x != nil {
		return x.AllowedTransLangs
	}
	return nil
}

func (x *SpeechToTextTranslationFeatures) GetDefaultSubtitleLang() string {
	if x != nil && x.DefaultSubtitleLang != nil {
		return *x.DefaultSubtitleLang
	}
	return ""
}

type EndToEndEncryptionFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnabled     bool    `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	EncryptionKey *string `protobuf:"bytes,2,opt,name=encryption_key,json=encryptionKey,proto3,oneof" json:"encryption_key,omitempty"`
}

func (x *EndToEndEncryptionFeatures) Reset() {
	*x = EndToEndEncryptionFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndToEndEncryptionFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndToEndEncryptionFeatures) ProtoMessage() {}

func (x *EndToEndEncryptionFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndToEndEncryptionFeatures.ProtoReflect.Descriptor instead.
func (*EndToEndEncryptionFeatures) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{13}
}

func (x *EndToEndEncryptionFeatures) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *EndToEndEncryptionFeatures) GetEncryptionKey() string {
	if x != nil && x.EncryptionKey != nil {
		return *x.EncryptionKey
	}
	return ""
}

type CopyrightConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Display bool   `protobuf:"varint,1,opt,name=display,proto3" json:"display,omitempty"`
	Text    string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *CopyrightConf) Reset() {
	*x = CopyrightConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyrightConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyrightConf) ProtoMessage() {}

func (x *CopyrightConf) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyrightConf.ProtoReflect.Descriptor instead.
func (*CopyrightConf) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{14}
}

func (x *CopyrightConf) GetDisplay() bool {
	if x != nil {
		return x.Display
	}
	return false
}

func (x *CopyrightConf) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type CreateRoomRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   bool          `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Msg      string        `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	RoomInfo *livekit.Room `protobuf:"bytes,3,opt,name=room_info,json=roomInfo,proto3" json:"room_info,omitempty"`
}

func (x *CreateRoomRes) Reset() {
	*x = CreateRoomRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugnmeet_create_room_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoomRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomRes) ProtoMessage() {}

func (x *CreateRoomRes) ProtoReflect() protoreflect.Message {
	mi := &file_plugnmeet_create_room_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomRes.ProtoReflect.Descriptor instead.
func (*CreateRoomRes) Descriptor() ([]byte, []int) {
	return file_plugnmeet_create_room_proto_rawDescGZIP(), []int{15}
}

func (x *CreateRoomRes) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *CreateRoomRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CreateRoomRes) GetRoomInfo() *livekit.Room {
	if x != nil {
		return x.RoomInfo
	}
	return nil
}

var File_plugnmeet_create_room_proto protoreflect.FileDescriptor

var file_plugnmeet_create_room_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x70,
	0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x1a, 0x19, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d,
	0x65, 0x65, 0x74, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65,
	0x74, 0x5f, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x80, 0x03, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65,
	0x71, 0x12, 0x9e, 0x01, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x84, 0x01, 0xba, 0x48, 0x80, 0x01, 0xba, 0x01, 0x7d, 0x0a, 0x0e, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x47, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x6e,
	0x6c, 0x79, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x73, 0x2c, 0x20, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x20, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73,
	0x3a, 0x20, 0x2d, 0x5f, 0x2e, 0x3a, 0x1a, 0x22, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x30, 0x2d,
	0x39, 0x2d, 0x5f, 0x2e, 0x3a, 0x5d, 0x2b, 0x24, 0x27, 0x29, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x0d, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xba, 0x48, 0x04, 0x2a, 0x02,
	0x20, 0x00, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x48, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x22, 0xce, 0x07, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x77, 0x65,
	0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07,
	0xba, 0x48, 0x04, 0x6a, 0x02, 0x08, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x72, 0x74, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xba, 0x48,
	0x04, 0x6a, 0x02, 0x08, 0x00, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x74, 0x6d, 0x70, 0x12, 0x84, 0x01, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5e, 0xba, 0x48,
	0x5b, 0xba, 0x01, 0x58, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x20, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61,
	0x6e, 0x79, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x24, 0x27, 0x29, 0x52, 0x0c, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x10, 0x69, 0x73,
	0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xba, 0x48, 0x04, 0x6a, 0x02, 0x08, 0x00, 0x52, 0x0e, 0x69,
	0x73, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x2e, 0x0a,
	0x0b, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x48, 0x01, 0x52, 0x0a,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x07, 0xba, 0x48, 0x04, 0x32, 0x02, 0x08, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0x88, 0x01, 0x01, 0x48, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x55, 0x72, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x4b, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0e,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74,
	0x2e, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0d,
	0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x7e, 0x0a,
	0x0b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x58, 0xba, 0x48, 0x55, 0xba, 0x01, 0x52, 0x0a, 0x12, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x28,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64, 0x20, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61,
	0x6e, 0x79, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x24, 0x27, 0x29, 0x48, 0x03, 0x52, 0x0a,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xbe, 0x0b, 0x0a, 0x12, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x5f, 0x77, 0x65, 0x62, 0x63, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x57, 0x65, 0x62, 0x63, 0x61, 0x6d, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x6d, 0x75, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x75, 0x74, 0x65, 0x4f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x74, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x74, 0x6d, 0x70,
	0x12, 0x37, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x62, 0x63, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x57, 0x65, 0x62, 0x63, 0x61, 0x6d, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x69, 0x65, 0x77, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x77, 0x65, 0x62, 0x63, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x57, 0x65,
	0x62, 0x63, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70,
	0x6f, 0x6c, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x50, 0x6f, 0x6c, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x0c, 0x72, 0x6f, 0x6f, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d,
	0x65, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x18, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e,
	0x6d, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x50,
	0x61, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x15, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x4e, 0x0a, 0x13, 0x77, 0x68, 0x69, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x12, 0x77,
	0x68, 0x69, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x6b, 0x0a, 0x1e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x1b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x52,
	0x0a, 0x15, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x13, 0x77,
	0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x55, 0x0a, 0x16, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x14, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x6f, 0x75, 0x74, 0x52, 0x6f, 0x6f,
	0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x1e, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e,
	0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x1b, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x0f, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x78, 0x0a,
	0x23, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54,
	0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x1f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f,
	0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x1e, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x6f, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x45, 0x6e, 0x64, 0x54,
	0x6f, 0x45, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x1a, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x64,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x43, 0x68, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xea, 0x04, 0x0a, 0x15, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x6a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x21, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x07, 0xba, 0x48, 0x04, 0x6a, 0x02, 0x08, 0x00, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x69, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0xba, 0x48, 0x4d, 0xba, 0x01, 0x4a, 0x0a, 0x0e, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x24, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x28, 0x27, 0x5e, 0x24, 0x27, 0x29, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x5e,
	0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0xba, 0x48,
	0x47, 0xba, 0x01, 0x44, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x21, 0x68, 0x6f, 0x73, 0x74, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x28, 0x27, 0x5e, 0x24, 0x27, 0x29, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x78,
	0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x58, 0xba, 0x48, 0x55, 0xba, 0x01, 0x52, 0x0a, 0x12, 0x6e, 0x6f, 0x74,
	0x65, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x28, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x20, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20,
	0x61, 0x6e, 0x79, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x24, 0x27, 0x29, 0x52, 0x09, 0x6e,
	0x6f, 0x74, 0x65, 0x50, 0x61, 0x64, 0x49, 0x64, 0x12, 0x8b, 0x01, 0x0a, 0x10, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x62, 0xba, 0x48, 0x5f, 0xba, 0x01, 0x5c, 0x0a, 0x17, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x2d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f,
	0x70, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x28, 0x27, 0x5e, 0x24, 0x27, 0x29, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x50, 0x61, 0x64, 0x49, 0x64, 0x22, 0xc7, 0x04, 0x0a, 0x12, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x57, 0x68, 0x69, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x07,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x6a, 0x02, 0x08, 0x00, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12,
	0x30, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0x88, 0x01, 0x01, 0x48,
	0x00, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x94, 0x01, 0x0a, 0x12, 0x77, 0x68, 0x69, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x66,
	0xba, 0x48, 0x63, 0xba, 0x01, 0x60, 0x0a, 0x19, 0x77, 0x68, 0x69, 0x74, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x2f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x28, 0x27, 0x5e, 0x24, 0x27, 0x29, 0x52, 0x10, 0x77, 0x68, 0x69, 0x74, 0x65, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x71, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x54, 0xba, 0x48, 0x51,
	0xba, 0x01, 0x4e, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x26, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x12, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x24, 0x27,
	0x29, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x71, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x54,
	0xba, 0x48, 0x51, 0xba, 0x01, 0x4e, 0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x26, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27,
	0x5e, 0x24, 0x27, 0x29, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0xf5, 0x02, 0x0a, 0x1b, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x41, 0x0a, 0x1d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xba, 0x48, 0x04, 0x6a, 0x02, 0x08, 0x00, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x76, 0x0a, 0x09, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x54, 0xba, 0x48,
	0x51, 0xba, 0x01, 0x4e, 0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x26, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x12,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x24,
	0x27, 0x29, 0x48, 0x00, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x5f, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x48,
	0xba, 0x48, 0x45, 0xba, 0x01, 0x42, 0x0a, 0x0a, 0x75, 0x72, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x20, 0x75, 0x72, 0x6c, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e,
	0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x28, 0x27, 0x5e, 0x24, 0x27, 0x29, 0x48, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x5c, 0x0a, 0x13, 0x57, 0x61, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x6f, 0x6f, 0x6d, 0x4d, 0x73, 0x67, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x6f, 0x75, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x6a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6f,
	0x6d, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x1b, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x24, 0x0a,
	0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x6a, 0x02, 0x08, 0x00, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x22, 0xf4, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x3d, 0x0a, 0x1b,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x69,
	0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x12, 0x39, 0x0a, 0x19, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x65, 0x62, 0x63, 0x61, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x6f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x57, 0x65, 0x62, 0x63, 0x61, 0x6d, 0x73, 0x22, 0xb7, 0x02, 0x0a,
	0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x36, 0x0a, 0x0a, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x48, 0xba, 0x48, 0x45, 0xba, 0x01, 0x42, 0x0a, 0x0a, 0x75, 0x72, 0x6c, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x20, 0x75, 0x72, 0x6c, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x79,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x24, 0x27, 0x29, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x75, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x56, 0xba, 0x48, 0x53, 0xba, 0x01, 0x50, 0x0a, 0x11, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x27,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6b, 0x65, 0x79, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c,
	0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e,
	0x79, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x24, 0x27, 0x29, 0x52, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x4b, 0x65, 0x79, 0x22, 0xc9, 0x04, 0x0a, 0x1f, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xba, 0x48, 0x04,
	0x6a, 0x02, 0x08, 0x00, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x3d, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x6a, 0x02, 0x08, 0x00, 0x52, 0x14, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a,
	0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48,
	0x05, 0x92, 0x01, 0x02, 0x10, 0x00, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x4c, 0x61, 0x6e, 0x67, 0x73, 0x12, 0x3a, 0x0a, 0x14, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02,
	0x10, 0x00, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x10, 0x00, 0x52, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x4c, 0x61, 0x6e, 0x67, 0x73,
	0x12, 0xa5, 0x01, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x6c, 0xba, 0x48, 0x69, 0xba, 0x01, 0x66, 0x0a, 0x1c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x32, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x20, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x20, 0x61, 0x6e, 0x79, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x24, 0x27, 0x29, 0x48, 0x00,
	0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x4c, 0x61, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x22, 0xdb, 0x01, 0x0a, 0x1a, 0x45, 0x6e, 0x64, 0x54, 0x6f, 0x45, 0x6e, 0x64, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x8a, 0x01, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x5e, 0xba, 0x48, 0x5b, 0xba, 0x01,
	0x58, 0x0a, 0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20,
	0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x79, 0x20,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x12, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x24, 0x27, 0x29, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x22, 0x3d, 0x0a, 0x0d, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x65, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x2a, 0x0a, 0x09, 0x72, 0x6f,
	0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6c, 0x69, 0x76, 0x65, 0x6b, 0x69, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x08, 0x72, 0x6f,
	0x6f, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x79, 0x6e, 0x61, 0x70, 0x61, 0x72, 0x72, 0x6f, 0x74, 0x2f,
	0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x6e, 0x6d, 0x65, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugnmeet_create_room_proto_rawDescOnce sync.Once
	file_plugnmeet_create_room_proto_rawDescData = file_plugnmeet_create_room_proto_rawDesc
)

func file_plugnmeet_create_room_proto_rawDescGZIP() []byte {
	file_plugnmeet_create_room_proto_rawDescOnce.Do(func() {
		file_plugnmeet_create_room_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugnmeet_create_room_proto_rawDescData)
	})
	return file_plugnmeet_create_room_proto_rawDescData
}

var file_plugnmeet_create_room_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_plugnmeet_create_room_proto_goTypes = []interface{}{
	(*CreateRoomReq)(nil),                   // 0: plugnmeet.CreateRoomReq
	(*RoomMetadata)(nil),                    // 1: plugnmeet.RoomMetadata
	(*RoomCreateFeatures)(nil),              // 2: plugnmeet.RoomCreateFeatures
	(*ChatFeatures)(nil),                    // 3: plugnmeet.ChatFeatures
	(*SharedNotePadFeatures)(nil),           // 4: plugnmeet.SharedNotePadFeatures
	(*WhiteboardFeatures)(nil),              // 5: plugnmeet.WhiteboardFeatures
	(*ExternalMediaPlayerFeatures)(nil),     // 6: plugnmeet.ExternalMediaPlayerFeatures
	(*WaitingRoomFeatures)(nil),             // 7: plugnmeet.WaitingRoomFeatures
	(*BreakoutRoomFeatures)(nil),            // 8: plugnmeet.BreakoutRoomFeatures
	(*DisplayExternalLinkFeatures)(nil),     // 9: plugnmeet.DisplayExternalLinkFeatures
	(*RecordingFeatures)(nil),               // 10: plugnmeet.RecordingFeatures
	(*IngressFeatures)(nil),                 // 11: plugnmeet.IngressFeatures
	(*SpeechToTextTranslationFeatures)(nil), // 12: plugnmeet.SpeechToTextTranslationFeatures
	(*EndToEndEncryptionFeatures)(nil),      // 13: plugnmeet.EndToEndEncryptionFeatures
	(*CopyrightConf)(nil),                   // 14: plugnmeet.CopyrightConf
	(*CreateRoomRes)(nil),                   // 15: plugnmeet.CreateRoomRes
	(*LockSettings)(nil),                    // 16: plugnmeet.LockSettings
	(IngressInput)(0),                       // 17: plugnmeet.IngressInput
	(*livekit.Room)(nil),                    // 18: livekit.Room
}
var file_plugnmeet_create_room_proto_depIdxs = []int32{
	1,  // 0: plugnmeet.CreateRoomReq.metadata:type_name -> plugnmeet.RoomMetadata
	2,  // 1: plugnmeet.RoomMetadata.room_features:type_name -> plugnmeet.RoomCreateFeatures
	16, // 2: plugnmeet.RoomMetadata.default_lock_settings:type_name -> plugnmeet.LockSettings
	14, // 3: plugnmeet.RoomMetadata.copyright_conf:type_name -> plugnmeet.CopyrightConf
	10, // 4: plugnmeet.RoomCreateFeatures.recording_features:type_name -> plugnmeet.RecordingFeatures
	3,  // 5: plugnmeet.RoomCreateFeatures.chat_features:type_name -> plugnmeet.ChatFeatures
	4,  // 6: plugnmeet.RoomCreateFeatures.shared_note_pad_features:type_name -> plugnmeet.SharedNotePadFeatures
	5,  // 7: plugnmeet.RoomCreateFeatures.whiteboard_features:type_name -> plugnmeet.WhiteboardFeatures
	6,  // 8: plugnmeet.RoomCreateFeatures.external_media_player_features:type_name -> plugnmeet.ExternalMediaPlayerFeatures
	7,  // 9: plugnmeet.RoomCreateFeatures.waiting_room_features:type_name -> plugnmeet.WaitingRoomFeatures
	8,  // 10: plugnmeet.RoomCreateFeatures.breakout_room_features:type_name -> plugnmeet.BreakoutRoomFeatures
	9,  // 11: plugnmeet.RoomCreateFeatures.display_external_link_features:type_name -> plugnmeet.DisplayExternalLinkFeatures
	11, // 12: plugnmeet.RoomCreateFeatures.ingress_features:type_name -> plugnmeet.IngressFeatures
	12, // 13: plugnmeet.RoomCreateFeatures.speech_to_text_translation_features:type_name -> plugnmeet.SpeechToTextTranslationFeatures
	13, // 14: plugnmeet.RoomCreateFeatures.end_to_end_encryption_features:type_name -> plugnmeet.EndToEndEncryptionFeatures
	17, // 15: plugnmeet.IngressFeatures.input_type:type_name -> plugnmeet.IngressInput
	18, // 16: plugnmeet.CreateRoomRes.room_info:type_name -> livekit.Room
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_plugnmeet_create_room_proto_init() }
func file_plugnmeet_create_room_proto_init() {
	if File_plugnmeet_create_room_proto != nil {
		return
	}
	file_plugnmeet_gen_token_proto_init()
	file_plugnmeet_ingress_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_plugnmeet_create_room_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoomReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_create_room_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_create_room_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomCreateFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_create_room_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_create_room_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SharedNotePadFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_create_room_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WhiteboardFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_create_room_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalMediaPlayerFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_create_room_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitingRoomFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_create_room_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BreakoutRoomFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_create_room_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayExternalLinkFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_create_room_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_create_room_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngressFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_create_room_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpeechToTextTranslationFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_create_room_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndToEndEncryptionFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_create_room_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyrightConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugnmeet_create_room_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoomRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_plugnmeet_create_room_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_plugnmeet_create_room_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_plugnmeet_create_room_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_plugnmeet_create_room_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_plugnmeet_create_room_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_plugnmeet_create_room_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_plugnmeet_create_room_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_plugnmeet_create_room_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_plugnmeet_create_room_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugnmeet_create_room_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugnmeet_create_room_proto_goTypes,
		DependencyIndexes: file_plugnmeet_create_room_proto_depIdxs,
		MessageInfos:      file_plugnmeet_create_room_proto_msgTypes,
	}.Build()
	File_plugnmeet_create_room_proto = out.File
	file_plugnmeet_create_room_proto_rawDesc = nil
	file_plugnmeet_create_room_proto_goTypes = nil
	file_plugnmeet_create_room_proto_depIdxs = nil
}
