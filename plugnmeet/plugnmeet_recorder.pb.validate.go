// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: plugnmeet_recorder.proto

package plugnmeet

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PlugNmeetToRecorder with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PlugNmeetToRecorder) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlugNmeetToRecorder with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PlugNmeetToRecorderMultiError, or nil if none found.
func (m *PlugNmeetToRecorder) ValidateAll() error {
	return m.validate(true)
}

func (m *PlugNmeetToRecorder) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for From

	// no validation rules for Task

	// no validation rules for RoomTableId

	// no validation rules for RoomId

	// no validation rules for RoomSid

	// no validation rules for RecordingId

	// no validation rules for RecorderId

	// no validation rules for AccessToken

	if m.RtmpUrl != nil {
		// no validation rules for RtmpUrl
	}

	if len(errors) > 0 {
		return PlugNmeetToRecorderMultiError(errors)
	}

	return nil
}

// PlugNmeetToRecorderMultiError is an error wrapping multiple validation
// errors returned by PlugNmeetToRecorder.ValidateAll() if the designated
// constraints aren't met.
type PlugNmeetToRecorderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlugNmeetToRecorderMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlugNmeetToRecorderMultiError) AllErrors() []error { return m }

// PlugNmeetToRecorderValidationError is the validation error returned by
// PlugNmeetToRecorder.Validate if the designated constraints aren't met.
type PlugNmeetToRecorderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlugNmeetToRecorderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlugNmeetToRecorderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlugNmeetToRecorderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlugNmeetToRecorderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlugNmeetToRecorderValidationError) ErrorName() string {
	return "PlugNmeetToRecorderValidationError"
}

// Error satisfies the builtin error interface
func (e PlugNmeetToRecorderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugNmeetToRecorder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlugNmeetToRecorderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlugNmeetToRecorderValidationError{}

// Validate checks the field values on RecorderToPlugNmeet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecorderToPlugNmeet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecorderToPlugNmeet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecorderToPlugNmeetMultiError, or nil if none found.
func (m *RecorderToPlugNmeet) ValidateAll() error {
	return m.validate(true)
}

func (m *RecorderToPlugNmeet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for From

	// no validation rules for Task

	// no validation rules for Status

	// no validation rules for Msg

	// no validation rules for RecordingId

	// no validation rules for RoomTableId

	// no validation rules for RoomId

	// no validation rules for RoomSid

	// no validation rules for RecorderId

	// no validation rules for FilePath

	// no validation rules for FileSize

	if len(errors) > 0 {
		return RecorderToPlugNmeetMultiError(errors)
	}

	return nil
}

// RecorderToPlugNmeetMultiError is an error wrapping multiple validation
// errors returned by RecorderToPlugNmeet.ValidateAll() if the designated
// constraints aren't met.
type RecorderToPlugNmeetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecorderToPlugNmeetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecorderToPlugNmeetMultiError) AllErrors() []error { return m }

// RecorderToPlugNmeetValidationError is the validation error returned by
// RecorderToPlugNmeet.Validate if the designated constraints aren't met.
type RecorderToPlugNmeetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecorderToPlugNmeetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecorderToPlugNmeetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecorderToPlugNmeetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecorderToPlugNmeetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecorderToPlugNmeetValidationError) ErrorName() string {
	return "RecorderToPlugNmeetValidationError"
}

// Error satisfies the builtin error interface
func (e RecorderToPlugNmeetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecorderToPlugNmeet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecorderToPlugNmeetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecorderToPlugNmeetValidationError{}

// Validate checks the field values on FromParentToChild with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FromParentToChild) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FromParentToChild with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FromParentToChildMultiError, or nil if none found.
func (m *FromParentToChild) ValidateAll() error {
	return m.validate(true)
}

func (m *FromParentToChild) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	// no validation rules for RecordingId

	// no validation rules for RoomTableId

	if len(errors) > 0 {
		return FromParentToChildMultiError(errors)
	}

	return nil
}

// FromParentToChildMultiError is an error wrapping multiple validation errors
// returned by FromParentToChild.ValidateAll() if the designated constraints
// aren't met.
type FromParentToChildMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FromParentToChildMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FromParentToChildMultiError) AllErrors() []error { return m }

// FromParentToChildValidationError is the validation error returned by
// FromParentToChild.Validate if the designated constraints aren't met.
type FromParentToChildValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FromParentToChildValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FromParentToChildValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FromParentToChildValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FromParentToChildValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FromParentToChildValidationError) ErrorName() string {
	return "FromParentToChildValidationError"
}

// Error satisfies the builtin error interface
func (e FromParentToChildValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFromParentToChild.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FromParentToChildValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FromParentToChildValidationError{}

// Validate checks the field values on FromChildToParent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FromChildToParent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FromChildToParent with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FromChildToParentMultiError, or nil if none found.
func (m *FromChildToParent) ValidateAll() error {
	return m.validate(true)
}

func (m *FromChildToParent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Task

	// no validation rules for Status

	// no validation rules for Msg

	// no validation rules for RecordingId

	// no validation rules for RoomTableId

	if len(errors) > 0 {
		return FromChildToParentMultiError(errors)
	}

	return nil
}

// FromChildToParentMultiError is an error wrapping multiple validation errors
// returned by FromChildToParent.ValidateAll() if the designated constraints
// aren't met.
type FromChildToParentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FromChildToParentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FromChildToParentMultiError) AllErrors() []error { return m }

// FromChildToParentValidationError is the validation error returned by
// FromChildToParent.Validate if the designated constraints aren't met.
type FromChildToParentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FromChildToParentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FromChildToParentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FromChildToParentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FromChildToParentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FromChildToParentValidationError) ErrorName() string {
	return "FromChildToParentValidationError"
}

// Error satisfies the builtin error interface
func (e FromChildToParentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFromChildToParent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FromChildToParentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FromChildToParentValidationError{}

// Validate checks the field values on StartRecorderChildArgs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartRecorderChildArgs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartRecorderChildArgs with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartRecorderChildArgsMultiError, or nil if none found.
func (m *StartRecorderChildArgs) ValidateAll() error {
	return m.validate(true)
}

func (m *StartRecorderChildArgs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoomTableId

	// no validation rules for RecordingId

	// no validation rules for AccessToken

	if all {
		switch v := interface{}(m.GetPlugNMeetInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartRecorderChildArgsValidationError{
					field:  "PlugNMeetInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartRecorderChildArgsValidationError{
					field:  "PlugNMeetInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlugNMeetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartRecorderChildArgsValidationError{
				field:  "PlugNMeetInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PostMp4Convert

	if all {
		switch v := interface{}(m.GetCopyToPath()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartRecorderChildArgsValidationError{
					field:  "CopyToPath",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartRecorderChildArgsValidationError{
					field:  "CopyToPath",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCopyToPath()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartRecorderChildArgsValidationError{
				field:  "CopyToPath",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ServiceType

	// no validation rules for WebsocketUrl

	if m.RecorderId != nil {
		// no validation rules for RecorderId
	}

	if m.RtmpUrl != nil {
		// no validation rules for RtmpUrl
	}

	if m.CustomChromePath != nil {
		// no validation rules for CustomChromePath
	}

	if m.Width != nil {
		// no validation rules for Width
	}

	if m.Height != nil {
		// no validation rules for Height
	}

	if m.XvfbDpi != nil {
		// no validation rules for XvfbDpi
	}

	if len(errors) > 0 {
		return StartRecorderChildArgsMultiError(errors)
	}

	return nil
}

// StartRecorderChildArgsMultiError is an error wrapping multiple validation
// errors returned by StartRecorderChildArgs.ValidateAll() if the designated
// constraints aren't met.
type StartRecorderChildArgsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartRecorderChildArgsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartRecorderChildArgsMultiError) AllErrors() []error { return m }

// StartRecorderChildArgsValidationError is the validation error returned by
// StartRecorderChildArgs.Validate if the designated constraints aren't met.
type StartRecorderChildArgsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartRecorderChildArgsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartRecorderChildArgsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartRecorderChildArgsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartRecorderChildArgsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartRecorderChildArgsValidationError) ErrorName() string {
	return "StartRecorderChildArgsValidationError"
}

// Error satisfies the builtin error interface
func (e StartRecorderChildArgsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartRecorderChildArgs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartRecorderChildArgsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartRecorderChildArgsValidationError{}

// Validate checks the field values on PlugNmeetInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PlugNmeetInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PlugNmeetInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PlugNmeetInfoMultiError, or
// nil if none found.
func (m *PlugNmeetInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PlugNmeetInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for ApiKey

	// no validation rules for ApiSecret

	if m.JoinHost != nil {
		// no validation rules for JoinHost
	}

	if len(errors) > 0 {
		return PlugNmeetInfoMultiError(errors)
	}

	return nil
}

// PlugNmeetInfoMultiError is an error wrapping multiple validation errors
// returned by PlugNmeetInfo.ValidateAll() if the designated constraints
// aren't met.
type PlugNmeetInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PlugNmeetInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PlugNmeetInfoMultiError) AllErrors() []error { return m }

// PlugNmeetInfoValidationError is the validation error returned by
// PlugNmeetInfo.Validate if the designated constraints aren't met.
type PlugNmeetInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PlugNmeetInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PlugNmeetInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PlugNmeetInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PlugNmeetInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PlugNmeetInfoValidationError) ErrorName() string { return "PlugNmeetInfoValidationError" }

// Error satisfies the builtin error interface
func (e PlugNmeetInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPlugNmeetInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PlugNmeetInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PlugNmeetInfoValidationError{}

// Validate checks the field values on CopyToPath with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CopyToPath) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CopyToPath with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CopyToPathMultiError, or
// nil if none found.
func (m *CopyToPath) ValidateAll() error {
	return m.validate(true)
}

func (m *CopyToPath) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MainPath

	if m.SubPath != nil {
		// no validation rules for SubPath
	}

	if len(errors) > 0 {
		return CopyToPathMultiError(errors)
	}

	return nil
}

// CopyToPathMultiError is an error wrapping multiple validation errors
// returned by CopyToPath.ValidateAll() if the designated constraints aren't met.
type CopyToPathMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CopyToPathMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CopyToPathMultiError) AllErrors() []error { return m }

// CopyToPathValidationError is the validation error returned by
// CopyToPath.Validate if the designated constraints aren't met.
type CopyToPathValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CopyToPathValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CopyToPathValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CopyToPathValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CopyToPathValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CopyToPathValidationError) ErrorName() string { return "CopyToPathValidationError" }

// Error satisfies the builtin error interface
func (e CopyToPathValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCopyToPath.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CopyToPathValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CopyToPathValidationError{}
