syntax = "proto3";
package plugnmeet;

option go_package = "github.com/mynaparrot/plugnmeet-protocol/plugnmeet";

enum AnalyticsEventType {
  ANALYTICS_EVENT_TYPE_ROOM = 0;
  ANALYTICS_EVENT_TYPE_USER = 1;
}

message AnalyticsDataMsg {
  AnalyticsEventType event_type = 1;
  AnalyticsEvents event_name = 2;
  string room_id = 3;
  // should be unix milliseconds
  int64 time = 4;
  // if we pass value here then it will use redis SET to set the value for the key
  optional string event_value_string = 5;
  // if we pass value here then it will use redis INCRBY to increment value for the key
  optional int64 event_value_integer = 6;
  // if we pass value here then it will use redis HSET to set hash field value for the key
  // hash field will be unix milliseconds, so it will remain unique as always
  optional string hset_value = 7;
  optional string room_sid = 8;
  optional string user_id = 9;
  optional string user_name = 10;
  // this extra_data can be use for various purposes like, room or user metadata
  optional string extra_data = 11;
}

message AnalyticsEventValue {
  int64 time = 1;
  string value = 2;
}

message AnalyticsEventData{
  string name = 1;
  uint32 total = 2;
  repeated AnalyticsEventValue values = 3;
}

message AnalyticsRoomInfo {
  string room_id = 1;
  string room_title = 2;
  int64 room_total_users = 3;
  int64 room_creation = 4;
  int64 room_ended = 5;
  int64 room_duration = 6;
  bool enabled_e2ee = 7;
  repeated AnalyticsEventData events = 9;
}

message AnalyticsUserInfo {
  string user_id = 1;
  string name = 2;
  bool is_admin = 3;
  optional string extra_data = 4;
  repeated AnalyticsEventData events = 5;
}

message AnalyticsResult {
    AnalyticsRoomInfo room = 1;
    repeated AnalyticsUserInfo users = 2;
}

message AnalyticsRedisUserInfo {
  optional string name = 1;
  bool is_admin = 2;
  optional string extra_data = 3;
}

enum AnalyticsEvents {
  ANALYTICS_EVENT_UNKNOWN = 0;
  // room related
  ANALYTICS_EVENT_ROOM_POLL_ADDED = 1;
  ANALYTICS_EVENT_ROOM_POLL_ENDED = 2;
  // user join will be room related
  // after take record it will pass to user
  ANALYTICS_EVENT_USER_JOINED  = 3;

  // room recorder
  ANALYTICS_EVENT_ROOM_RECORDING_STATUS = 4;
  ANALYTICS_EVENT_ROOM_RTMP_STATUS = 5;
  ANALYTICS_EVENT_ROOM_BREAKOUT_ROOM = 6;
  ANALYTICS_EVENT_ROOM_ETHERPAD_STATUS = 7;

  ANALYTICS_EVENT_ROOM_EXTERNAL_DISPLAY_LINK_STATUS = 8;
  ANALYTICS_EVENT_ROOM_EXTERNAL_MEDIA_PLAYER_STATUS = 9;

  ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_STATUS = 10;
  ANALYTICS_EVENT_ROOM_SPEECH_SERVICE_TOTAL_USAGE = 11;

  ANALYTICS_EVENT_ROOM_INGRESS_CREATED = 12;
  ANALYTICS_EVENT_ROOM_WHITEBOARD_FILES = 13;

  // here all related with user
  ANALYTICS_EVENT_USER_LEFT  = 14;
  // microphone
  ANALYTICS_EVENT_USER_MIC_STATUS = 15;
  ANALYTICS_EVENT_USER_TALKED = 16;
  ANALYTICS_EVENT_USER_TALKED_DURATION = 17; // in milliseconds
  // webcam
  ANALYTICS_EVENT_USER_WEBCAM_STATUS = 18;
  // screen share
  ANALYTICS_EVENT_USER_SCREEN_SHARE_STATUS = 19;
  // polls
  ANALYTICS_EVENT_USER_VOTED_POLL = 20;
  // chat
  ANALYTICS_EVENT_USER_PUBLIC_CHAT = 21;
  ANALYTICS_EVENT_USER_PRIVATE_CHAT = 22;
  ANALYTICS_EVENT_USER_CHAT_FILES = 23;
  // whiteboard
  ANALYTICS_EVENT_USER_WHITEBOARD_ANNOTATED = 24;
  ANALYTICS_EVENT_USER_WHITEBOARD_FILES = 25;
  // speech services
  ANALYTICS_EVENT_USER_SPEECH_SERVICES_USAGE = 26;
  ANALYTICS_EVENT_USER_SPEECH_SERVICES_STATUS = 27;

  // etc
  ANALYTICS_EVENT_USER_INTERFACE_VISIBILITY = 28;
  ANALYTICS_EVENT_USER_RAISE_HAND = 29;
  ANALYTICS_EVENT_USER_CONNECTION_QUALITY = 30;

  // next ID: 31
}

enum AnalyticsStatus {
  ANALYTICS_STATUS_STARTED = 0;
  ANALYTICS_STATUS_ENDED = 1;
  ANALYTICS_STATUS_MUTED = 2;
  ANALYTICS_STATUS_UNMUTED = 3;
}
